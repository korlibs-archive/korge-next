pluginManagement {
	repositories {
        mavenLocal()
		mavenCentral()
        google()
		gradlePluginPortal()
        maven { url = uri("https://maven.pkg.jetbrains.space/public/p/compose/dev") }
        maven { url = uri("https://maven.pkg.jetbrains.space/kotlin/p/kotlin/temporary") }
        maven { url = uri("https://maven.pkg.jetbrains.space/public/p/kotlinx-coroutines/maven") }
        maven { url = uri("https://oss.sonatype.org/content/repositories/snapshots/") }
	}
}

rootProject.name = "korlibs-next"

boolean isPropertyTrue(String name) {
    return System.getenv(name) == "true" || System.getProperty(name) == "true"
}

boolean inCI = isPropertyTrue("CI")
boolean includeKorlibsSamples = isPropertyTrue("INCLUDE_KORLIBS_SAMPLES")
boolean disabledExtraKorgeLibs = isPropertyTrue("DISABLED_EXTRA_KORGE_LIBS")

include(":klock")
include(":klogger")
include(":korinject")
include(":kmem")
include(":kds")
include(":korma")
include(":krypto")
include(":korte")
include(":korio")
include(":korim")
include(":korau")
include(":korgw")
include(":korvi")
include(":korge")
include(":korge-gradle-plugin")

if (!inCI) {
    include(":korge-sandbox")
}

if (!disabledExtraKorgeLibs) {
    include(":luak")
    include(":kbox2d")
    include(":korge-compose-runtime")
    include(":korge-compose")
    include(":korge-dragonbones")
    include(":korge-spine")
    include(":korge-swf")
    include(":korge-box2d")
    include(":korge-fleks")

    //include(":samples:parallax-scrolling-aseprite")
    //include(":samples:tiled-background")
    //include(":samples:fleks-ecs")

    // This is required because having tons of gradle modules is super slow
    boolean skipKorgeSamples = !includeKorlibsSamples

    if (!skipKorgeSamples && !inCI) {
        fileTree(new File(rootProject.projectDir, "samples")) {
            include("**" + "/build.gradle.kts")
            include("**" + "/build.gradle")
            exclude("**" + "/build/**")
        }.forEach {
            String sample = moduleName(it.parentFile)
            include(":$sample")
            //project(":$sample").projectDir = File(relativePath(it.parent))
        }
    }
}

String moduleName(File f) {
    return (f.parentFile == rootDir) ? f.name : "${moduleName(f.parentFile)}:${f.name}"
}
