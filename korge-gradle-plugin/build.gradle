import org.apache.tools.ant.taskdefs.optional.unix.Symlink

import java.nio.file.Files

plugins {
    id "org.gradle.kotlin.kotlin-dsl" version "2.1.7"
    id "java"
    id "java-gradle-plugin"
    id "maven-publish"
    id "com.gradle.plugin-publish"
    id "org.jetbrains.kotlin.jvm"
}

description = "Multiplatform Game Engine written in Kotlin"
group = "com.soywiz.korlibs.korge.plugins"

pluginBundle {
	website = "https://korge.soywiz.com/"
	vcsUrl = "https://github.com/korlibs/korge-plugins"
	tags = ["korge", "game", "engine", "game engine", "multiplatform", "kotlin"]
}

gradlePlugin {
	plugins {
		create("korge") {
			id = "com.soywiz.korge"
			displayName = "Korge"
			description = "Multiplatform Game Engine for Kotlin"
			implementationClass = "com.soywiz.korge.gradle.KorgeGradlePlugin"
		}
	}
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
        sourceCompatibility = "1.8"
        apiVersion = "1.4"
        languageVersion = "1.4"
		//jvmTarget = "1.6"
    }
}

kotlin.sourceSets.main.each {
    it.kotlin.srcDirs(new File(buildDir, "srcgen"), new File(buildDir, "srcgen2"))
}

com.soywiz.korlibs.NativeTools.groovyConfigurePublishing(project, false)
com.soywiz.korlibs.NativeTools.groovyConfigureSigning(project)

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin")
    implementation("org.jetbrains.kotlin:kotlin-serialization")

    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin")

    implementation(libs.proguard.gradle)

    implementation("com.android.tools.build:gradle:${libs.versions.android.build.gradle.get()}")
    implementation(libs.closure.compiler)

	implementation(gradleApi())
	implementation(localGroovy())
    //compileOnly(gradleKotlinDsl())

    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    testImplementation("io.mockk:mockk:1.11.0")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions.suppressWarnings = true
}

def publishAllPublications = false

def publishJvmPublicationToMavenLocal = tasks.register("publishJvmPublicationToMavenLocal", Task) {
    dependsOn(publishAllPublications ? "publishToMavenLocal" : "publishPluginMavenPublicationToMavenLocal")
}

afterEvaluate {
    def publishTaskOrNull = tasks.findByName(
        publishAllPublications ? "publishAllPublicationsToMavenRepository" : "publishPluginMavenPublicationToMavenRepository"
    )

    if (publishTaskOrNull != null) {
        def publishJvmPublicationToMavenRepository = tasks.register("publishJvmPublicationToMavenRepository", Task) {
            dependsOn(publishTaskOrNull)
        }
    }
}

def jvmTest = tasks.register("jvmTest", Task) {
    dependsOn("test")
}
