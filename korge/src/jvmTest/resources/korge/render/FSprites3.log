draw(vertexCount=4, instances=4, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=FSprites3, attributes=[a_uv1, a_uv0, a_colMul, a_texId, a_xy, a_rangle, a_scale, a_axy, a_rxy], uniforms=[u_texSize0, u_texSize1, u_texSize2, u_ProjMat, u_ViewMat, u_Tex0, u_Tex1, u_Tex2])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=null
::draw.stencil=StencilState(enabled=false, triangleFace=FRONT_AND_BACK, compareMode=ALWAYS, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=0, readMask=255, writeMask=255)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.01, 0, 0, -1 ],
  [ 0, -0.01, 0, 1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 2, 0, 0, 0 ],
  [ 0, 2, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=Texture[0], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=Texture[0], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=Texture[0], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_texSize0) = [0.03125, 0.03125]
::draw.uniform.Uniform(u_texSize1) = [0.03125, 0.03125]
::draw.uniform.Uniform(u_texSize2) = [0.03125, 0.03125]
::draw.ERROR.Unexpected:[Uniform(u_Tex3)]
::draw.attribute[7][0]=Attribute(a_xy, type=Float2, normalized=false, offset=null, active=true, precision=DEFAULT, divisor=0)
::draw.attribute[4][0]=Attribute(a_rxy, type=Float2, normalized=false, offset=null, active=true, precision=DEFAULT, divisor=1)
::draw.attribute[4][1]=Attribute(a_scale, type=Float2, normalized=true, offset=null, active=true, precision=DEFAULT, divisor=1)
::draw.attribute[4][2]=Attribute(a_rangle, type=Float1, normalized=false, offset=null, active=true, precision=DEFAULT, divisor=1)
::draw.attribute[4][3]=Attribute(a_axy, type=UShort2, normalized=true, offset=null, active=true, precision=DEFAULT, divisor=1)
::draw.attribute[4][4]=Attribute(a_uv0, type=UShort2, normalized=false, offset=null, active=true, precision=DEFAULT, divisor=1)
::draw.attribute[4][5]=Attribute(a_uv1, type=UShort2, normalized=false, offset=null, active=true, precision=DEFAULT, divisor=1)
::draw.attribute[5][0]=Attribute(a_colMul, type=Byte4, normalized=true, offset=null, active=true, precision=LOW, divisor=1)
::draw.attribute[6][0]=Attribute(a_texId, type=UByte1, normalized=false, offset=null, active=true, precision=LOW, divisor=1)
::draw.indices=[0, 1, 2, 3]
::draw.vertex[0]: a_xy[0,0]
::draw.vertex[1]: a_xy[1,0]
::draw.vertex[2]: a_xy[1,1]
::draw.vertex[3]: a_xy[0,1]
::draw.instance[0]: a_rxy[100,100], a_scale[1,1], a_rangle[0], a_axy[0.49999237,0.49999237], a_uv0[0,0], a_uv1[32,32], a_colMul[1,1,1,0.49803922], a_texId[0]
::draw.instance[1]: a_rxy[200,100], a_scale[1,1], a_rangle[0], a_axy[0.49999237,1], a_uv0[0,0], a_uv1[32,32], a_colMul[1,1,1,0.49803922], a_texId[1]
::draw.instance[2]: a_rxy[300,100], a_scale[1,1], a_rangle[0], a_axy[0.49999237,0], a_uv0[0,0], a_uv1[32,32], a_colMul[1,1,1,0.49803922], a_texId[2]
::draw.instance[3]: a_rxy[400,100], a_scale[1,1], a_rangle[0], a_axy[0,1], a_uv0[0,0], a_uv1[32,32], a_colMul[1,1,1,0.49803922], a_texId[0]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute vec2 a_uv1;
attribute vec2 a_uv0;
attribute lowp vec4 a_colMul;
attribute lowp float a_texId;
attribute vec2 a_xy;
attribute float a_rangle;
attribute vec2 a_scale;
attribute vec2 a_axy;
attribute vec2 a_rxy;
uniform vec2 u_texSize0;
uniform vec2 u_texSize1;
uniform vec2 u_texSize2;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying vec4 v_Col;
varying lowp float v_TexId;
varying mediump vec2 v_Tex;
void main() {
	vec4 temp1;
	vec4 temp0;
	mat2 temp2;
	temp1.xy = (a_uv1 - a_uv0);
	v_Col = a_colMul;
	v_TexId = a_texId;
	if ((a_texId <= 1.0)) {
		if ((a_texId == 0.0)) {
			temp1.zw = u_texSize0;
		}
		else {
			temp1.zw = u_texSize1;
		}
	}
	else {
		temp1.zw = u_texSize2;
	}
	v_Tex = (vec2(mix(a_uv0.x, a_uv1.x, a_xy.x), mix(a_uv0.y, a_uv1.y, a_xy.y)) * temp1.zw);
	temp0.x = cos(a_rangle);
	temp0.y = sin(a_rangle);
	temp2 = mat2(temp0.x, (-(temp0.y)), temp0.y, temp0.x);
	temp0.zw = (temp1.xy * a_scale);
	temp0.xy = (temp2 * ((a_xy - a_axy) * temp0.zw));
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4((temp0.xy + vec2(a_rxy.x, a_rxy.y)), 0.0, 1.0));
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform sampler2D u_Tex0;
uniform sampler2D u_Tex1;
uniform sampler2D u_Tex2;
varying lowp float v_TexId;
varying mediump vec2 v_Tex;
varying vec4 v_Col;
void main() {
	if ((v_TexId <= 1.0)) {
		if ((v_TexId == 0.0)) {
			gl_FragColor = texture2D(u_Tex0, v_Tex.xy);
		}
		else {
			gl_FragColor = texture2D(u_Tex1, v_Tex.xy);
		}
	}
	else {
		gl_FragColor = texture2D(u_Tex2, v_Tex.xy);
	}
	if ((gl_FragColor.a <= 0.0)) {
		discard;
	}
	gl_FragColor.rgb = (gl_FragColor.rgb / gl_FragColor.a);
	gl_FragColor.rgba = (gl_FragColor.rgba * v_Col);
}
