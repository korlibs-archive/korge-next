RenderBuffer[0].set()
clear(#00000000, 1.0, 0, true, true, true)
textureCreate: 1
createTexture():0
Texture[0].uploadedBitmap(SyncBitmapSource(rgba=true, width=32, height=32), 32, 32)
createBuffer():4
bufferCreate: 5
Buffer[4].afterSetMem(mem[512])
createBuffer():5
bufferCreate: 6
Buffer[5].afterSetMem(mem[64])
createBuffer():6
bufferCreate: 7
Buffer[6].afterSetMem(mem[4])
createBuffer():7
bufferCreate: 8
Buffer[7].afterSetMem(mem[32])
enable: SCISSOR
scissor: 0, 0, 200, 200
programCreate: 1, Program(name=FSprites4, attributes=[a_uv1, a_uv0, a_colMul, a_texId, a_xy, a_rangle, a_scale, a_axy, a_rxy], uniforms=[u_texSize0, u_texSize1, u_texSize2, u_texSize3, u_ProjMat, u_ViewMat, u_Tex0, u_Tex1, u_Tex2, u_Tex3]), ProgramConfig(externalTextureSampler=false)
programCreate.fragment:#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform sampler2D u_Tex0;
uniform sampler2D u_Tex1;
uniform sampler2D u_Tex2;
uniform sampler2D u_Tex3;
varying lowp float v_TexId;
varying mediump vec2 v_Tex;
varying vec4 v_Col;
void main() {
	if ((v_TexId <= 1.0)) {
		if ((v_TexId == 0.0)) {
			gl_FragColor = texture2D(u_Tex0, v_Tex.xy);
		}
		else {
			gl_FragColor = texture2D(u_Tex1, v_Tex.xy);
		}
	}
	else {
		if ((v_TexId == 2.0)) {
			gl_FragColor = texture2D(u_Tex2, v_Tex.xy);
		}
		else {
			gl_FragColor = texture2D(u_Tex3, v_Tex.xy);
		}
	}
	if ((gl_FragColor.a <= 0.0)) {
		discard;
	}
	gl_FragColor.rgb = (gl_FragColor.rgb / gl_FragColor.a);
	gl_FragColor.rgba = (gl_FragColor.rgba * v_Col);
}

programCreate.vertex:#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute vec2 a_uv1;
attribute vec2 a_uv0;
attribute lowp vec4 a_colMul;
attribute lowp float a_texId;
attribute vec2 a_xy;
attribute float a_rangle;
attribute vec2 a_scale;
attribute vec2 a_axy;
attribute vec2 a_rxy;
uniform vec2 u_texSize0;
uniform vec2 u_texSize1;
uniform vec2 u_texSize2;
uniform vec2 u_texSize3;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying vec4 v_Col;
varying lowp float v_TexId;
varying mediump vec2 v_Tex;
void main() {
	vec4 temp1;
	vec4 temp0;
	mat2 temp2;
	temp1.xy = (a_uv1 - a_uv0);
	v_Col = a_colMul;
	v_TexId = a_texId;
	if ((a_texId <= 1.0)) {
		if ((a_texId == 0.0)) {
			temp1.zw = u_texSize0;
		}
		else {
			temp1.zw = u_texSize1;
		}
	}
	else {
		if ((a_texId == 2.0)) {
			temp1.zw = u_texSize2;
		}
		else {
			temp1.zw = u_texSize3;
		}
	}
	v_Tex = (vec2(mix(a_uv0.x, a_uv1.x, a_xy.x), mix(a_uv0.y, a_uv1.y, a_xy.y)) * temp1.zw);
	temp0.x = cos(a_rangle);
	temp0.y = sin(a_rangle);
	temp2 = mat2(temp0.x, (-(temp0.y)), temp0.y, temp0.x);
	temp0.zw = (temp1.xy * a_scale);
	temp0.xy = (temp2 * ((a_xy - a_axy) * temp0.zw));
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4((temp0.xy + vec2(a_rxy.x, a_rxy.y)), 0.0, 1.0));
}

programUse: 1
vaoCreate: 1
vaoSet: 1, VertexArrayObject(list=[VertexData(_buffer=Buffer[7], layout=VertexLayout[a_xy]), VertexData(_buffer=Buffer[4], layout=VertexLayout[a_rxy, a_scale, a_rangle, a_axy, a_uv0, a_uv1]), VertexData(_buffer=Buffer[5], layout=VertexLayout[a_colMul]), VertexData(_buffer=Buffer[6], layout=VertexLayout[a_texId])])
vaoUse: 1
uboCreate: 1
uboSet: 1
uboSet.uniform: Uniform(u_ProjMat) = Matrix3D(
  [ 0.02, 0, 0, -1 ],
  [ 0, -0.02, 0, 1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_Tex0) = TextureUnit(texture=Texture[0], linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex1) = TextureUnit(texture=Texture[0], linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex2) = TextureUnit(texture=Texture[0], linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex3) = TextureUnit(texture=Texture[0], linear=true, trilinear=null)
uboSet.uniform: Uniform(u_texSize0) = [0.03125, 0.03125]
uboSet.uniform: Uniform(u_texSize1) = [0.03125, 0.03125]
uboSet.uniform: Uniform(u_texSize2) = [0.03125, 0.03125]
uboSet.uniform: Uniform(u_texSize3) = [0.03125, 0.03125]
uboUse: 1
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLE_FAN, offset=0, count=4, instances=4, indexType=null
::draw.indices: [0, 1, 2, 3]
::draw.attributes[4]: [Attribute(a_xy), Attribute(a_rxy), Attribute(a_scale), Attribute(a_rangle), Attribute(a_axy), Attribute(a_uv0), Attribute(a_uv1), Attribute(a_colMul), Attribute(a_texId)]
::draw.vertex[0]: a_xy[0,0]
::draw.vertex[1]: a_xy[1,0]
::draw.vertex[2]: a_xy[1,1]
::draw.vertex[3]: a_xy[0,1]
::draw.instance[0]: a_rxy[100,100], a_scale[1,1], a_rangle[0], a_axy[0.49999237,0.49999237], a_uv0[0,0], a_uv1[32,32], a_colMul[1,1,1,0.49803922], a_texId[0]
::draw.instance[1]: a_rxy[200,100], a_scale[1,1], a_rangle[0], a_axy[0.49999237,1], a_uv0[0,0], a_uv1[32,32], a_colMul[1,1,1,0.49803922], a_texId[1]
::draw.instance[2]: a_rxy[300,100], a_scale[1,1], a_rangle[0], a_axy[0.49999237,0], a_uv0[0,0], a_uv1[32,32], a_colMul[1,1,1,0.49803922], a_texId[2]
::draw.instance[3]: a_rxy[400,100], a_scale[1,1], a_rangle[0], a_axy[0,1], a_uv0[0,0], a_uv1[32,32], a_colMul[1,1,1,0.49803922], a_texId[3]
vaoUse: 0
vaoDelete: 1
Buffer[4].afterSetMem(mem[512])
disposeTemporalPerFrameStuff()
flipInternal()
finish