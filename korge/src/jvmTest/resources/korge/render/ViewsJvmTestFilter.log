createBuffer():0
bufferCreate: 1
createBuffer():1
bufferCreate: 2
createBuffer():2
bufferCreate: 3
createBuffer():3
bufferCreate: 4
clear(#000000ff, 1.0, 0, true, true, true)
createRenderBuffer():0
RenderBuffer[0].setSize(64, 64)
RenderBuffer[0].set()
clear(#00000000, 1.0, 0, true, true, true)
textureCreate: 1
createTexture():0
Texture[0].uploadedBitmap(SyncBitmapSource(rgba=true, width=10, height=10), 10, 10)
RenderBuffer[1].setSize(1280, 720)
createMainRenderBuffer():1
Buffer[0].afterSetMem(mem[393216])
Buffer[1].afterSetMem(mem[4])
Buffer[2].afterSetMem(mem[49152])
enable: SCISSOR
scissor: 0, 0, 10, 10
vaoCreate: 1
vaoSet: 1, VertexArrayObject(list=[VertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), VertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex])])
vaoUse: 1
uboCreate: 1
uboSet: 1
uboSet.uniform: Uniform(u_ProjMat) = Matrix3D(
  [ 0.03125, 0, 0, -1 ],
  [ 0, 0.03125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_Tex0) = TextureUnit(texture=Texture[0], linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex1) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex2) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex3) = TextureUnit(texture=null, linear=true, trilinear=null)
uboUse: 1
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=6, instances=1, indexType=USHORT
::draw.indices: [0, 1, 2, 3, 0, 2]
::draw.attributes[2]: [Attribute(a_Pos), Attribute(a_Tex), Attribute(a_Col), Attribute(a_Col2), Attribute(a_TexIndex)]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[1]: a_Pos[10,0], a_Tex[1,0], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[2]: a_Pos[10,10], a_Tex[1,1], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[3]: a_Pos[0,10], a_Tex[0,1], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
uboDelete: 1
vaoUse: 0
vaoDelete: 1
textureCreate: 2
createTexture():1
createRenderBuffer():2
RenderBuffer[2].setSize(64, 64)
RenderBuffer[2].set()
clear(#00000000, 1.0, 0, true, true, true)
Buffer[0].afterSetMem(mem[393216])
Buffer[1].afterSetMem(mem[4])
Buffer[2].afterSetMem(mem[49152])
enable: SCISSOR
scissor: 0, 0, 10, 10
vaoCreate: 1
vaoSet: 1, VertexArrayObject(list=[VertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), VertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex])])
vaoUse: 1
uboCreate: 1
uboSet: 1
uboSet.uniform: Uniform(u_ProjMat) = Matrix3D(
  [ 0.03125, 0, 0, -1 ],
  [ 0, 0.03125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_Tex0) = TextureUnit(texture=Texture[1], linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex1) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex2) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex3) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(effectTextureSize) = [64.0, 64.0]
uboSet.uniform: Uniform(u_MaxTexCoords) = [0.15625, 0.15625]
uboSet.uniform: Uniform(u_StdTexDerivates) = [0.015625, 0.015625]
uboSet.uniform: Uniform(colorMatrix) = Matrix3D(
  [ 0.33, 0.59, 0.11, 0 ],
  [ 0.33, 0.59, 0.11, 0 ],
  [ 0.33, 0.59, 0.11, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(blendRatio) = [1.0, 0.0, 0.0, 0.0]
uboSet.uniform: Uniform(u_filterScale) = 1.0
uboUse: 1
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=6, instances=1, indexType=USHORT
::draw.indices: [0, 1, 2, 3, 0, 2]
::draw.attributes[2]: [Attribute(a_Pos), Attribute(a_Tex), Attribute(a_Col), Attribute(a_Col2), Attribute(a_TexIndex)]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[1]: a_Pos[10,0], a_Tex[0.15625,0], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[2]: a_Pos[10,10], a_Tex[0.15625,0.15625], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[3]: a_Pos[0,10], a_Tex[0,0.15625], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
uboDelete: 1
vaoUse: 0
vaoDelete: 1
textureCreate: 3
createTexture():2
createRenderBuffer():3
RenderBuffer[3].setSize(64, 64)
RenderBuffer[3].set()
clear(#00000000, 1.0, 0, true, true, true)
Buffer[0].afterSetMem(mem[393216])
Buffer[1].afterSetMem(mem[4])
Buffer[2].afterSetMem(mem[49152])
enable: SCISSOR
scissor: 0, 0, 12, 12
vaoCreate: 1
vaoSet: 1, VertexArrayObject(list=[VertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), VertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex])])
vaoUse: 1
uboCreate: 1
uboSet: 1
uboSet.uniform: Uniform(u_ProjMat) = Matrix3D(
  [ 0.03125, 0, 0, -1 ],
  [ 0, 0.03125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_Tex0) = TextureUnit(texture=Texture[2], linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex1) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex2) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex3) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(effectTextureSize) = [64.0, 64.0]
uboSet.uniform: Uniform(u_MaxTexCoords) = [0.1875, 0.1875]
uboSet.uniform: Uniform(u_StdTexDerivates) = [0.015625, 0.015625]
uboSet.uniform: Uniform(weights) = Matrix3D(
  [ -1, -1, -1, 0 ],
  [ -1, 8, -1, 0 ],
  [ -1, -1, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(dist) = [1.0, 0.0, 0.0, 0.0]
uboSet.uniform: Uniform(apply_alpha) = [0.0, 0.0, 0.0, 0.0]
uboSet.uniform: Uniform(u_filterScale) = 1.0
uboUse: 1
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=6, instances=1, indexType=USHORT
::draw.indices: [0, 1, 2, 3, 0, 2]
::draw.attributes[2]: [Attribute(a_Pos), Attribute(a_Tex), Attribute(a_Col), Attribute(a_Col2), Attribute(a_TexIndex)]
::draw.vertex[0]: a_Pos[0,0], a_Tex[-0.015625,-0.015625], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[1]: a_Pos[12,0], a_Tex[0.171875,-0.015625], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[2]: a_Pos[12,12], a_Tex[0.171875,0.171875], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[3]: a_Pos[0,12], a_Tex[-0.015625,0.171875], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
uboDelete: 1
vaoUse: 0
vaoDelete: 1
textureCreate: 4
createTexture():3
Buffer[0].afterSetMem(mem[393216])
Buffer[1].afterSetMem(mem[4])
Buffer[2].afterSetMem(mem[49152])
vaoCreate: 1
vaoSet: 1, VertexArrayObject(list=[VertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), VertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex])])
vaoUse: 1
uboCreate: 1
uboSet: 1
uboSet.uniform: Uniform(u_ProjMat) = Matrix3D(
  [ 0.0015625, 0, 0, -1 ],
  [ 0, -0.0027777778, 0, 1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_Tex0) = TextureUnit(texture=Texture[3], linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex1) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex2) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex3) = TextureUnit(texture=null, linear=true, trilinear=null)
uboUse: 1
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=6, instances=1, indexType=USHORT
::draw.indices: [0, 1, 2, 3, 0, 2]
::draw.attributes[2]: [Attribute(a_Pos), Attribute(a_Tex), Attribute(a_Col), Attribute(a_Col2), Attribute(a_TexIndex)]
::draw.vertex[0]: a_Pos[-1,-1], a_Tex[0,0], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[1]: a_Pos[11,-1], a_Tex[0.1875,0], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[2]: a_Pos[11,11], a_Tex[0.1875,0.1875], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[3]: a_Pos[-1,11], a_Tex[0,0.1875], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
uboDelete: 1
vaoUse: 0
vaoDelete: 1
disposeTemporalPerFrameStuff()
flipInternal()