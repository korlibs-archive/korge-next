draw(vertexCount=12, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos], uniforms=[u_ProjMat, u_ViewMat])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=ALWAYS, actionOnBothPass=INVERT, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=0, readMask=255, writeMask=1)
::draw.blending=Blending(srcRGB=ONE, dstRGB=ZERO, srcA=ONE, dstA=ZERO, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=false, green=false, blue=false, alpha=false)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[5][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
::draw.vertex[0]: a_Pos[-520,-920]
::draw.vertex[1]: a_Pos[-260,-660]
::draw.vertex[2]: a_Pos[-740,-660]
::draw.vertex[3]: a_Pos[-740,-1140]
::draw.vertex[4]: a_Pos[-260,-1140]
::draw.vertex[5]: a_Pos[-260,-660]
::draw.vertex[6]: a_Pos[-460,-860]
::draw.vertex[7]: a_Pos[-460,-1180]
::draw.vertex[8]: a_Pos[-780,-1180]
::draw.vertex[9]: a_Pos[-780,-860]
::draw.vertex[10]: a_Pos[-460,-860]
::draw.vertex[11]: a_Pos[-260,-660]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
void main() {
	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

draw(vertexCount=18, instances=1, indices=null, type=TRIANGLE_STRIP, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Color, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=NOT_EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Color) = [0.0, 0.0, 1.0, 1.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 1.0
::draw.uniform.Uniform(u_LineWidth) = 1.25
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[5][0]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.attribute[6][0]=Attribute(a_Dist, type=Float1, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
::draw.vertex[0]: a_Pos[-261.25,-661.25], a_Tex[-261.25,-661.25], a_Dist[-1.5]
::draw.vertex[1]: a_Pos[-260,-658.75], a_Tex[-260,-658.75], a_Dist[1.5]
::draw.vertex[2]: a_Pos[-738.75,-661.25], a_Tex[-738.75,-661.25], a_Dist[-1.5]
::draw.vertex[3]: a_Pos[-740,-658.75], a_Tex[-740,-658.75], a_Dist[1.5]
::draw.vertex[4]: a_Pos[-738.75,-661.25], a_Tex[-738.75,-661.25], a_Dist[-1.5]
::draw.vertex[5]: a_Pos[-741.25,-660], a_Tex[-741.25,-660], a_Dist[1.5]
::draw.vertex[6]: a_Pos[-738.75,-1138.75], a_Tex[-738.75,-1138.75], a_Dist[-1.5]
::draw.vertex[7]: a_Pos[-741.25,-1140], a_Tex[-741.25,-1140], a_Dist[1.5]
::draw.vertex[8]: a_Pos[-738.75,-1138.75], a_Tex[-738.75,-1138.75], a_Dist[-1.5]
::draw.vertex[9]: a_Pos[-740,-1141.25], a_Tex[-740,-1141.25], a_Dist[1.5]
::draw.vertex[10]: a_Pos[-261.25,-1138.75], a_Tex[-261.25,-1138.75], a_Dist[-1.5]
::draw.vertex[11]: a_Pos[-260,-1141.25], a_Tex[-260,-1141.25], a_Dist[1.5]
::draw.vertex[12]: a_Pos[-261.25,-1138.75], a_Tex[-261.25,-1138.75], a_Dist[-1.5]
::draw.vertex[13]: a_Pos[-258.75,-1140], a_Tex[-258.75,-1140], a_Dist[1.5]
::draw.vertex[14]: a_Pos[-261.25,-661.25], a_Tex[-261.25,-661.25], a_Dist[-1.5]
::draw.vertex[15]: a_Pos[-258.75,-660], a_Tex[-258.75,-660], a_Dist[1.5]
::draw.vertex[16]: a_Pos[-261.25,-661.25], a_Tex[-261.25,-661.25], a_Dist[-1.5]
::draw.vertex[17]: a_Pos[-260,-658.75], a_Tex[-260,-658.75], a_Dist[1.5]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform vec4 u_Color;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
void main() {
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	gl_FragColor = u_Color;
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=18, instances=1, indices=null, type=TRIANGLE_STRIP, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Color, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=NOT_EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Color) = [0.0, 0.0, 1.0, 1.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 1.0
::draw.uniform.Uniform(u_LineWidth) = 1.25
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[5][0]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.attribute[6][0]=Attribute(a_Dist, type=Float1, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
::draw.vertex[0]: a_Pos[-458.75,-860], a_Tex[-458.75,-860], a_Dist[-1.5]
::draw.vertex[1]: a_Pos[-461.25,-861.25], a_Tex[-461.25,-861.25], a_Dist[1.5]
::draw.vertex[2]: a_Pos[-458.75,-1180], a_Tex[-458.75,-1180], a_Dist[-1.5]
::draw.vertex[3]: a_Pos[-461.25,-1178.75], a_Tex[-461.25,-1178.75], a_Dist[1.5]
::draw.vertex[4]: a_Pos[-460,-1181.25], a_Tex[-460,-1181.25], a_Dist[-1.5]
::draw.vertex[5]: a_Pos[-461.25,-1178.75], a_Tex[-461.25,-1178.75], a_Dist[1.5]
::draw.vertex[6]: a_Pos[-780,-1181.25], a_Tex[-780,-1181.25], a_Dist[-1.5]
::draw.vertex[7]: a_Pos[-778.75,-1178.75], a_Tex[-778.75,-1178.75], a_Dist[1.5]
::draw.vertex[8]: a_Pos[-781.25,-1180], a_Tex[-781.25,-1180], a_Dist[-1.5]
::draw.vertex[9]: a_Pos[-778.75,-1178.75], a_Tex[-778.75,-1178.75], a_Dist[1.5]
::draw.vertex[10]: a_Pos[-781.25,-860], a_Tex[-781.25,-860], a_Dist[-1.5]
::draw.vertex[11]: a_Pos[-778.75,-861.25], a_Tex[-778.75,-861.25], a_Dist[1.5]
::draw.vertex[12]: a_Pos[-780,-858.75], a_Tex[-780,-858.75], a_Dist[-1.5]
::draw.vertex[13]: a_Pos[-778.75,-861.25], a_Tex[-778.75,-861.25], a_Dist[1.5]
::draw.vertex[14]: a_Pos[-460,-858.75], a_Tex[-460,-858.75], a_Dist[-1.5]
::draw.vertex[15]: a_Pos[-461.25,-861.25], a_Tex[-461.25,-861.25], a_Dist[1.5]
::draw.vertex[16]: a_Pos[-458.75,-860], a_Tex[-458.75,-860], a_Dist[-1.5]
::draw.vertex[17]: a_Pos[-461.25,-861.25], a_Tex[-461.25,-861.25], a_Dist[1.5]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform vec4 u_Color;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
void main() {
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	gl_FragColor = u_Color;
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=4, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Color, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Color) = [0.0, 0.0, 1.0, 1.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 1.0
::draw.uniform.Uniform(u_LineWidth) = 1.0E7
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.ERROR.Unexpected:[Attribute(a_Dist)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[4][1]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0]
::draw.vertex[1]: a_Pos[200,0], a_Tex[100,0]
::draw.vertex[2]: a_Pos[200,200], a_Tex[100,100]
::draw.vertex[3]: a_Pos[0,200], a_Tex[0,100]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform vec4 u_Color;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
void main() {
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	gl_FragColor = u_Color;
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=276, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos], uniforms=[u_ProjMat, u_ViewMat])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=ALWAYS, actionOnBothPass=INVERT, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=0, readMask=255, writeMask=1)
::draw.blending=Blending(srcRGB=ONE, dstRGB=ZERO, srcA=ONE, dstA=ZERO, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=false, green=false, blue=false, alpha=false)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[5][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275]
::draw.vertex[0]: a_Pos[-700.02246,-1100]
::draw.vertex[1]: a_Pos[-860,-1100]
::draw.vertex[2]: a_Pos[-859.955,-1096.1687]
::draw.vertex[3]: a_Pos[-859.8208,-1092.3595]
::draw.vertex[4]: a_Pos[-859.59827,-1088.5735]
::draw.vertex[5]: a_Pos[-859.2885,-1084.8114]
::draw.vertex[6]: a_Pos[-858.89246,-1081.0746]
::draw.vertex[7]: a_Pos[-858.41113,-1077.3638]
::draw.vertex[8]: a_Pos[-857.8455,-1073.68]
::draw.vertex[9]: a_Pos[-857.1967,-1070.0244]
::draw.vertex[10]: a_Pos[-856.46564,-1066.398]
::draw.vertex[11]: a_Pos[-855.6533,-1062.8016]
::draw.vertex[12]: a_Pos[-854.76074,-1059.2363]
::draw.vertex[13]: a_Pos[-853.7889,-1055.7031]
::draw.vertex[14]: a_Pos[-852.73883,-1052.2031]
::draw.vertex[15]: a_Pos[-851.6115,-1048.7372]
::draw.vertex[16]: a_Pos[-850.40796,-1045.3064]
::draw.vertex[17]: a_Pos[-849.12915,-1041.9117]
::draw.vertex[18]: a_Pos[-847.7761,-1038.5542]
::draw.vertex[19]: a_Pos[-846.3499,-1035.2349]
::draw.vertex[20]: a_Pos[-844.85144,-1031.9546]
::draw.vertex[21]: a_Pos[-843.28174,-1028.7145]
::draw.vertex[22]: a_Pos[-841.6418,-1025.5155]
::draw.vertex[23]: a_Pos[-839.9327,-1022.35864]
::draw.vertex[24]: a_Pos[-838.15533,-1019.245]
::draw.vertex[25]: a_Pos[-836.3107,-1016.1754]
::draw.vertex[26]: a_Pos[-834.39996,-1013.151]
::draw.vertex[27]: a_Pos[-832.424,-1010.1727]
::draw.vertex[28]: a_Pos[-830.3838,-1007.2417]
::draw.vertex[29]: a_Pos[-828.2804,-1004.35876]
::draw.vertex[30]: a_Pos[-826.1148,-1001.525]
::draw.vertex[31]: a_Pos[-823.88806,-998.74146]
::draw.vertex[32]: a_Pos[-821.6011,-996.00903]
::draw.vertex[33]: a_Pos[-819.2549,-993.32874]
::draw.vertex[34]: a_Pos[-816.8505,-990.70166]
::draw.vertex[35]: a_Pos[-814.389,-988.1288]
::draw.vertex[36]: a_Pos[-811.8713,-985.61096]
::draw.vertex[37]: a_Pos[-809.29834,-983.1494]
::draw.vertex[38]: a_Pos[-806.67126,-980.7451]
::draw.vertex[39]: a_Pos[-803.991,-978.3989]
::draw.vertex[40]: a_Pos[-801.2586,-976.11194]
::draw.vertex[41]: a_Pos[-798.47504,-973.88513]
::draw.vertex[42]: a_Pos[-795.64124,-971.7196]
::draw.vertex[43]: a_Pos[-792.7583,-969.6162]
::draw.vertex[44]: a_Pos[-789.8273,-967.57605]
::draw.vertex[45]: a_Pos[-786.849,-965.6]
::draw.vertex[46]: a_Pos[-783.8246,-963.6892]
::draw.vertex[47]: a_Pos[-780.75507,-961.8447]
::draw.vertex[48]: a_Pos[-777.64136,-960.0674]
::draw.vertex[49]: a_Pos[-774.48456,-958.35815]
::draw.vertex[50]: a_Pos[-771.2855,-956.71826]
::draw.vertex[51]: a_Pos[-768.0454,-955.14856]
::draw.vertex[52]: a_Pos[-764.76514,-953.65015]
::draw.vertex[53]: a_Pos[-761.44574,-952.2239]
::draw.vertex[54]: a_Pos[-758.08826,-950.87085]
::draw.vertex[55]: a_Pos[-754.69354,-949.59204]
::draw.vertex[56]: a_Pos[-751.26276,-948.38855]
::draw.vertex[57]: a_Pos[-747.7969,-947.2612]
::draw.vertex[58]: a_Pos[-744.2968,-946.21106]
::draw.vertex[59]: a_Pos[-740.7637,-945.23926]
::draw.vertex[60]: a_Pos[-737.1984,-944.3467]
::draw.vertex[61]: a_Pos[-733.60205,-943.5344]
::draw.vertex[62]: a_Pos[-729.9755,-942.8032]
::draw.vertex[63]: a_Pos[-726.31995,-942.1544]
::draw.vertex[64]: a_Pos[-722.6362,-941.58887]
::draw.vertex[65]: a_Pos[-718.9255,-941.10754]
::draw.vertex[66]: a_Pos[-715.18854,-940.71155]
::draw.vertex[67]: a_Pos[-711.4266,-940.40173]
::draw.vertex[68]: a_Pos[-707.64044,-940.1792]
::draw.vertex[69]: a_Pos[-703.8313,-940.0449]
::draw.vertex[70]: a_Pos[-696.1687,-940.0449]
::draw.vertex[71]: a_Pos[-692.35956,-940.1792]
::draw.vertex[72]: a_Pos[-688.5734,-940.40173]
::draw.vertex[73]: a_Pos[-684.81146,-940.71155]
::draw.vertex[74]: a_Pos[-681.0745,-941.10754]
::draw.vertex[75]: a_Pos[-677.3638,-941.58887]
::draw.vertex[76]: a_Pos[-673.68005,-942.1544]
::draw.vertex[77]: a_Pos[-670.0245,-942.8032]
::draw.vertex[78]: a_Pos[-666.39795,-943.5344]
::draw.vertex[79]: a_Pos[-662.8016,-944.3467]
::draw.vertex[80]: a_Pos[-659.2363,-945.23926]
::draw.vertex[81]: a_Pos[-655.7032,-946.21106]
::draw.vertex[82]: a_Pos[-652.2031,-947.2612]
::draw.vertex[83]: a_Pos[-648.73724,-948.38855]
::draw.vertex[84]: a_Pos[-645.30646,-949.59204]
::draw.vertex[85]: a_Pos[-641.91174,-950.87085]
::draw.vertex[86]: a_Pos[-638.55426,-952.2239]
::draw.vertex[87]: a_Pos[-635.23486,-953.65015]
::draw.vertex[88]: a_Pos[-631.9546,-955.14856]
::draw.vertex[89]: a_Pos[-628.7145,-956.71826]
::draw.vertex[90]: a_Pos[-625.51544,-958.35815]
::draw.vertex[91]: a_Pos[-622.35864,-960.0674]
::draw.vertex[92]: a_Pos[-619.24493,-961.8447]
::draw.vertex[93]: a_Pos[-616.1754,-963.6892]
::draw.vertex[94]: a_Pos[-613.151,-965.6]
::draw.vertex[95]: a_Pos[-610.1727,-967.57605]
::draw.vertex[96]: a_Pos[-607.2417,-969.6162]
::draw.vertex[97]: a_Pos[-604.35876,-971.7196]
::draw.vertex[98]: a_Pos[-601.52496,-973.88513]
::draw.vertex[99]: a_Pos[-598.7414,-976.11194]
::draw.vertex[100]: a_Pos[-596.009,-978.3989]
::draw.vertex[101]: a_Pos[-593.32874,-980.7451]
::draw.vertex[102]: a_Pos[-590.70166,-983.1494]
::draw.vertex[103]: a_Pos[-588.1287,-985.61096]
::draw.vertex[104]: a_Pos[-585.611,-988.1288]
::draw.vertex[105]: a_Pos[-583.1495,-990.70166]
::draw.vertex[106]: a_Pos[-580.7451,-993.32874]
::draw.vertex[107]: a_Pos[-578.3989,-996.00903]
::draw.vertex[108]: a_Pos[-576.11194,-998.74146]
::draw.vertex[109]: a_Pos[-573.8852,-1001.525]
::draw.vertex[110]: a_Pos[-571.7196,-1004.35876]
::draw.vertex[111]: a_Pos[-569.6162,-1007.2417]
::draw.vertex[112]: a_Pos[-567.576,-1010.1727]
::draw.vertex[113]: a_Pos[-565.60004,-1013.151]
::draw.vertex[114]: a_Pos[-563.6893,-1016.1754]
::draw.vertex[115]: a_Pos[-561.84467,-1019.245]
::draw.vertex[116]: a_Pos[-560.0673,-1022.35864]
::draw.vertex[117]: a_Pos[-558.3582,-1025.5155]
::draw.vertex[118]: a_Pos[-556.71826,-1028.7145]
::draw.vertex[119]: a_Pos[-555.14856,-1031.9546]
::draw.vertex[120]: a_Pos[-553.6501,-1035.2349]
::draw.vertex[121]: a_Pos[-552.2239,-1038.5542]
::draw.vertex[122]: a_Pos[-550.87085,-1041.9117]
::draw.vertex[123]: a_Pos[-549.59204,-1045.3064]
::draw.vertex[124]: a_Pos[-548.3885,-1048.7372]
::draw.vertex[125]: a_Pos[-547.26117,-1052.2031]
::draw.vertex[126]: a_Pos[-546.2111,-1055.7031]
::draw.vertex[127]: a_Pos[-545.23926,-1059.2363]
::draw.vertex[128]: a_Pos[-544.3467,-1062.8016]
::draw.vertex[129]: a_Pos[-543.53436,-1066.398]
::draw.vertex[130]: a_Pos[-542.8033,-1070.0244]
::draw.vertex[131]: a_Pos[-542.1545,-1073.68]
::draw.vertex[132]: a_Pos[-541.58887,-1077.3638]
::draw.vertex[133]: a_Pos[-541.10754,-1081.0746]
::draw.vertex[134]: a_Pos[-540.7115,-1084.8114]
::draw.vertex[135]: a_Pos[-540.40173,-1088.5735]
::draw.vertex[136]: a_Pos[-540.1792,-1092.3595]
::draw.vertex[137]: a_Pos[-540.045,-1096.1687]
::draw.vertex[138]: a_Pos[-540.045,-1103.8313]
::draw.vertex[139]: a_Pos[-540.1792,-1107.6405]
::draw.vertex[140]: a_Pos[-540.40173,-1111.4265]
::draw.vertex[141]: a_Pos[-540.7115,-1115.1886]
::draw.vertex[142]: a_Pos[-541.10754,-1118.9254]
::draw.vertex[143]: a_Pos[-541.58887,-1122.6362]
::draw.vertex[144]: a_Pos[-542.1545,-1126.32]
::draw.vertex[145]: a_Pos[-542.8033,-1129.9756]
::draw.vertex[146]: a_Pos[-543.53436,-1133.602]
::draw.vertex[147]: a_Pos[-544.3467,-1137.1984]
::draw.vertex[148]: a_Pos[-545.23926,-1140.7637]
::draw.vertex[149]: a_Pos[-546.2111,-1144.2969]
::draw.vertex[150]: a_Pos[-547.26117,-1147.7969]
::draw.vertex[151]: a_Pos[-548.3885,-1151.2628]
::draw.vertex[152]: a_Pos[-549.59204,-1154.6936]
::draw.vertex[153]: a_Pos[-550.87085,-1158.0883]
::draw.vertex[154]: a_Pos[-552.2239,-1161.4458]
::draw.vertex[155]: a_Pos[-553.6501,-1164.7651]
::draw.vertex[156]: a_Pos[-555.14856,-1168.0454]
::draw.vertex[157]: a_Pos[-556.71826,-1171.2855]
::draw.vertex[158]: a_Pos[-558.3582,-1174.4845]
::draw.vertex[159]: a_Pos[-560.0673,-1177.6414]
::draw.vertex[160]: a_Pos[-561.84467,-1180.755]
::draw.vertex[161]: a_Pos[-563.6893,-1183.8246]
::draw.vertex[162]: a_Pos[-565.60004,-1186.849]
::draw.vertex[163]: a_Pos[-567.576,-1189.8273]
::draw.vertex[164]: a_Pos[-569.6162,-1192.7583]
::draw.vertex[165]: a_Pos[-571.7196,-1195.6412]
::draw.vertex[166]: a_Pos[-573.8852,-1198.475]
::draw.vertex[167]: a_Pos[-576.11194,-1201.2585]
::draw.vertex[168]: a_Pos[-578.3989,-1203.991]
::draw.vertex[169]: a_Pos[-580.7451,-1206.6713]
::draw.vertex[170]: a_Pos[-583.1495,-1209.2983]
::draw.vertex[171]: a_Pos[-585.611,-1211.8712]
::draw.vertex[172]: a_Pos[-588.1287,-1214.389]
::draw.vertex[173]: a_Pos[-590.70166,-1216.8506]
::draw.vertex[174]: a_Pos[-593.32874,-1219.2549]
::draw.vertex[175]: a_Pos[-596.009,-1221.6011]
::draw.vertex[176]: a_Pos[-598.7414,-1223.8881]
::draw.vertex[177]: a_Pos[-601.52496,-1226.1149]
::draw.vertex[178]: a_Pos[-604.35876,-1228.2804]
::draw.vertex[179]: a_Pos[-607.2417,-1230.3838]
::draw.vertex[180]: a_Pos[-610.1727,-1232.424]
::draw.vertex[181]: a_Pos[-613.151,-1234.4]
::draw.vertex[182]: a_Pos[-616.1754,-1236.3108]
::draw.vertex[183]: a_Pos[-619.24493,-1238.1553]
::draw.vertex[184]: a_Pos[-622.35864,-1239.9326]
::draw.vertex[185]: a_Pos[-625.51544,-1241.6418]
::draw.vertex[186]: a_Pos[-628.7145,-1243.2817]
::draw.vertex[187]: a_Pos[-631.9546,-1244.8514]
::draw.vertex[188]: a_Pos[-635.23486,-1246.3499]
::draw.vertex[189]: a_Pos[-638.55426,-1247.7761]
::draw.vertex[190]: a_Pos[-641.91174,-1249.1292]
::draw.vertex[191]: a_Pos[-645.30646,-1250.408]
::draw.vertex[192]: a_Pos[-648.73724,-1251.6115]
::draw.vertex[193]: a_Pos[-652.2031,-1252.7388]
::draw.vertex[194]: a_Pos[-655.7032,-1253.789]
::draw.vertex[195]: a_Pos[-659.2363,-1254.7607]
::draw.vertex[196]: a_Pos[-662.8016,-1255.6533]
::draw.vertex[197]: a_Pos[-666.39795,-1256.4656]
::draw.vertex[198]: a_Pos[-670.0245,-1257.1968]
::draw.vertex[199]: a_Pos[-673.68005,-1257.8456]
::draw.vertex[200]: a_Pos[-677.3638,-1258.4111]
::draw.vertex[201]: a_Pos[-681.0745,-1258.8925]
::draw.vertex[202]: a_Pos[-684.81146,-1259.2885]
::draw.vertex[203]: a_Pos[-688.5734,-1259.5983]
::draw.vertex[204]: a_Pos[-692.35956,-1259.8208]
::draw.vertex[205]: a_Pos[-696.1687,-1259.9551]
::draw.vertex[206]: a_Pos[-703.8313,-1259.9551]
::draw.vertex[207]: a_Pos[-707.64044,-1259.8208]
::draw.vertex[208]: a_Pos[-711.4266,-1259.5983]
::draw.vertex[209]: a_Pos[-715.18854,-1259.2885]
::draw.vertex[210]: a_Pos[-718.9255,-1258.8925]
::draw.vertex[211]: a_Pos[-722.6362,-1258.4111]
::draw.vertex[212]: a_Pos[-726.31995,-1257.8456]
::draw.vertex[213]: a_Pos[-729.9755,-1257.1968]
::draw.vertex[214]: a_Pos[-733.60205,-1256.4656]
::draw.vertex[215]: a_Pos[-737.1984,-1255.6533]
::draw.vertex[216]: a_Pos[-740.7637,-1254.7607]
::draw.vertex[217]: a_Pos[-744.2968,-1253.789]
::draw.vertex[218]: a_Pos[-747.7969,-1252.7388]
::draw.vertex[219]: a_Pos[-751.26276,-1251.6115]
::draw.vertex[220]: a_Pos[-754.69354,-1250.408]
::draw.vertex[221]: a_Pos[-758.08826,-1249.1292]
::draw.vertex[222]: a_Pos[-761.44574,-1247.7761]
::draw.vertex[223]: a_Pos[-764.76514,-1246.3499]
::draw.vertex[224]: a_Pos[-768.0454,-1244.8514]
::draw.vertex[225]: a_Pos[-771.2855,-1243.2817]
::draw.vertex[226]: a_Pos[-774.48456,-1241.6418]
::draw.vertex[227]: a_Pos[-777.64136,-1239.9326]
::draw.vertex[228]: a_Pos[-780.75507,-1238.1553]
::draw.vertex[229]: a_Pos[-783.8246,-1236.3108]
::draw.vertex[230]: a_Pos[-786.849,-1234.4]
::draw.vertex[231]: a_Pos[-789.8273,-1232.424]
::draw.vertex[232]: a_Pos[-792.7583,-1230.3838]
::draw.vertex[233]: a_Pos[-795.64124,-1228.2804]
::draw.vertex[234]: a_Pos[-798.47504,-1226.1149]
::draw.vertex[235]: a_Pos[-801.2586,-1223.8881]
::draw.vertex[236]: a_Pos[-803.991,-1221.6011]
::draw.vertex[237]: a_Pos[-806.67126,-1219.2549]
::draw.vertex[238]: a_Pos[-809.29834,-1216.8506]
::draw.vertex[239]: a_Pos[-811.8713,-1214.389]
::draw.vertex[240]: a_Pos[-814.389,-1211.8712]
::draw.vertex[241]: a_Pos[-816.8505,-1209.2983]
::draw.vertex[242]: a_Pos[-819.2549,-1206.6713]
::draw.vertex[243]: a_Pos[-821.6011,-1203.991]
::draw.vertex[244]: a_Pos[-823.88806,-1201.2585]
::draw.vertex[245]: a_Pos[-826.1148,-1198.475]
::draw.vertex[246]: a_Pos[-828.2804,-1195.6412]
::draw.vertex[247]: a_Pos[-830.3838,-1192.7583]
::draw.vertex[248]: a_Pos[-832.424,-1189.8273]
::draw.vertex[249]: a_Pos[-834.39996,-1186.849]
::draw.vertex[250]: a_Pos[-836.3107,-1183.8246]
::draw.vertex[251]: a_Pos[-838.15533,-1180.755]
::draw.vertex[252]: a_Pos[-839.9327,-1177.6414]
::draw.vertex[253]: a_Pos[-841.6418,-1174.4845]
::draw.vertex[254]: a_Pos[-843.28174,-1171.2855]
::draw.vertex[255]: a_Pos[-844.85144,-1168.0454]
::draw.vertex[256]: a_Pos[-846.3499,-1164.7651]
::draw.vertex[257]: a_Pos[-847.7761,-1161.4458]
::draw.vertex[258]: a_Pos[-849.12915,-1158.0883]
::draw.vertex[259]: a_Pos[-850.40796,-1154.6936]
::draw.vertex[260]: a_Pos[-851.6115,-1151.2628]
::draw.vertex[261]: a_Pos[-852.73883,-1147.7969]
::draw.vertex[262]: a_Pos[-853.7889,-1144.2969]
::draw.vertex[263]: a_Pos[-854.76074,-1140.7637]
::draw.vertex[264]: a_Pos[-855.6533,-1137.1984]
::draw.vertex[265]: a_Pos[-856.46564,-1133.602]
::draw.vertex[266]: a_Pos[-857.1967,-1129.9756]
::draw.vertex[267]: a_Pos[-857.8455,-1126.32]
::draw.vertex[268]: a_Pos[-858.41113,-1122.6362]
::draw.vertex[269]: a_Pos[-858.89246,-1118.9254]
::draw.vertex[270]: a_Pos[-859.2885,-1115.1886]
::draw.vertex[271]: a_Pos[-859.59827,-1111.4265]
::draw.vertex[272]: a_Pos[-859.8208,-1107.6405]
::draw.vertex[273]: a_Pos[-859.955,-1103.8313]
::draw.vertex[274]: a_Pos[-860,-1100]
::draw.vertex[275]: a_Pos[-860,-1100]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
void main() {
	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

draw(vertexCount=310, instances=1, indices=null, type=TRIANGLE_STRIP, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Color, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=NOT_EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Color) = [1.0, 1.0, 0.0, 1.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 1.0
::draw.uniform.Uniform(u_LineWidth) = 1.25
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[5][0]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.attribute[6][0]=Attribute(a_Dist, type=Float1, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309]
::draw.vertex[0]: a_Pos[-861.24896,-1099.9495], a_Tex[-861.24896,-1099.9495], a_Dist[-1.5]
::draw.vertex[1]: a_Pos[-858.74896,-1100], a_Tex[-858.74896,-1100], a_Dist[1.5]
::draw.vertex[2]: a_Pos[-860.71857,-1086.827], a_Tex[-860.71857,-1086.827], a_Dist[-1.5]
::draw.vertex[3]: a_Pos[-858.22266,-1086.9785], a_Tex[-858.22266,-1086.9785], a_Dist[1.5]
::draw.vertex[4]: a_Pos[-860.71045,-1086.7263], a_Tex[-860.71045,-1086.7263], a_Dist[-1.5]
::draw.vertex[5]: a_Pos[-858.22266,-1086.9785], a_Tex[-858.22266,-1086.9785], a_Dist[1.5]
::draw.vertex[6]: a_Pos[-859.14667,-1073.896], a_Tex[-859.14667,-1073.896], a_Dist[-1.5]
::draw.vertex[7]: a_Pos[-856.67114,-1074.2483], a_Tex[-856.67114,-1074.2483], a_Dist[1.5]
::draw.vertex[8]: a_Pos[-859.1305,-1073.7968], a_Tex[-859.1305,-1073.7968], a_Dist[-1.5]
::draw.vertex[9]: a_Pos[-856.67114,-1074.2483], a_Tex[-856.67114,-1074.2483], a_Dist[1.5]
::draw.vertex[10]: a_Pos[-856.57465,-1061.2997], a_Tex[-856.57465,-1061.2997], a_Dist[-1.5]
::draw.vertex[11]: a_Pos[-854.1353,-1061.8495], a_Tex[-854.1353,-1061.8495], a_Dist[1.5]
::draw.vertex[12]: a_Pos[-856.5507,-1061.2028], a_Tex[-856.5507,-1061.2028], a_Dist[-1.5]
::draw.vertex[13]: a_Pos[-854.1353,-1061.8495], a_Tex[-854.1353,-1061.8495], a_Dist[1.5]
::draw.vertex[14]: a_Pos[-853.0439,-1049.0802], a_Tex[-853.0439,-1049.0802], a_Dist[-1.5]
::draw.vertex[15]: a_Pos[-850.65607,-1049.8225], a_Tex[-850.65607,-1049.8225], a_Dist[1.5]
::draw.vertex[16]: a_Pos[-853.01263,-1048.9865], a_Tex[-853.01263,-1048.9865], a_Dist[-1.5]
::draw.vertex[17]: a_Pos[-850.65607,-1049.8225], a_Tex[-850.65607,-1049.8225], a_Dist[1.5]
::draw.vertex[18]: a_Pos[-848.59595,-1037.2795], a_Tex[-848.59595,-1037.2795], a_Dist[-1.5]
::draw.vertex[19]: a_Pos[-846.2742,-1038.2079], a_Tex[-846.2742,-1038.2079], a_Dist[1.5]
::draw.vertex[20]: a_Pos[-848.5578,-1037.1892], a_Tex[-848.5578,-1037.1892], a_Dist[-1.5]
::draw.vertex[21]: a_Pos[-846.2742,-1038.2079], a_Tex[-846.2742,-1038.2079], a_Dist[1.5]
::draw.vertex[22]: a_Pos[-843.27246,-1025.9392], a_Tex[-843.27246,-1025.9392], a_Dist[-1.5]
::draw.vertex[23]: a_Pos[-841.0304,-1027.0463], a_Tex[-841.0304,-1027.0463], a_Dist[1.5]
::draw.vertex[24]: a_Pos[-843.2277,-1025.853], a_Tex[-843.2277,-1025.853], a_Dist[-1.5]
::draw.vertex[25]: a_Pos[-841.0304,-1027.0463], a_Tex[-841.0304,-1027.0463], a_Dist[1.5]
::draw.vertex[26]: a_Pos[-837.115,-1015.101], a_Tex[-837.115,-1015.101], a_Dist[-1.5]
::draw.vertex[27]: a_Pos[-834.9655,-1016.37854], a_Tex[-834.9655,-1016.37854], a_Dist[1.5]
::draw.vertex[28]: a_Pos[-837.06415,-1015.0191], a_Tex[-837.06415,-1015.0191], a_Dist[-1.5]
::draw.vertex[29]: a_Pos[-834.9655,-1016.37854], a_Tex[-834.9655,-1016.37854], a_Dist[1.5]
::draw.vertex[30]: a_Pos[-830.1651,-1004.80634], a_Tex[-830.1651,-1004.80634], a_Dist[-1.5]
::draw.vertex[31]: a_Pos[-828.1203,-1006.24554], a_Tex[-828.1203,-1006.24554], a_Dist[1.5]
::draw.vertex[32]: a_Pos[-830.1084,-1004.72906], a_Tex[-830.1084,-1004.72906], a_Dist[-1.5]
::draw.vertex[33]: a_Pos[-828.1203,-1006.24554], a_Tex[-828.1203,-1006.24554], a_Dist[1.5]
::draw.vertex[34]: a_Pos[-822.4643,-995.0967], a_Tex[-822.4643,-995.0967], a_Dist[-1.5]
::draw.vertex[35]: a_Pos[-820.5357,-996.6882], a_Tex[-820.5357,-996.6882], a_Dist[1.5]
::draw.vertex[36]: a_Pos[-822.4021,-995.0242], a_Tex[-822.4021,-995.0242], a_Dist[-1.5]
::draw.vertex[37]: a_Pos[-820.5357,-996.6882], a_Tex[-820.5357,-996.6882], a_Dist[1.5]
::draw.vertex[38]: a_Pos[-814.054,-986.01337], a_Tex[-814.054,-986.01337], a_Dist[-1.5]
::draw.vertex[39]: a_Pos[-812.25256,-987.74744], a_Tex[-812.25256,-987.74744], a_Dist[1.5]
::draw.vertex[40]: a_Pos[-813.98663,-985.946], a_Tex[-813.98663,-985.946], a_Dist[-1.5]
::draw.vertex[41]: a_Pos[-812.25256,-987.74744], a_Tex[-812.25256,-987.74744], a_Dist[1.5]
::draw.vertex[42]: a_Pos[-804.9758,-977.5979], a_Tex[-804.9758,-977.5979], a_Dist[-1.5]
::draw.vertex[43]: a_Pos[-803.3118,-979.4643], a_Tex[-803.3118,-979.4643], a_Dist[1.5]
::draw.vertex[44]: a_Pos[-804.9033,-977.5357], a_Tex[-804.9033,-977.5357], a_Dist[-1.5]
::draw.vertex[45]: a_Pos[-803.3118,-979.4643], a_Tex[-803.3118,-979.4643], a_Dist[1.5]
::draw.vertex[46]: a_Pos[-795.27094,-969.8916], a_Tex[-795.27094,-969.8916], a_Dist[-1.5]
::draw.vertex[47]: a_Pos[-793.75446,-971.8797], a_Tex[-793.75446,-971.8797], a_Dist[1.5]
::draw.vertex[48]: a_Pos[-795.19366,-969.8349], a_Tex[-795.19366,-969.8349], a_Dist[-1.5]
::draw.vertex[49]: a_Pos[-793.75446,-971.8797], a_Tex[-793.75446,-971.8797], a_Dist[1.5]
::draw.vertex[50]: a_Pos[-784.9809,-962.93585], a_Tex[-784.9809,-962.93585], a_Dist[-1.5]
::draw.vertex[51]: a_Pos[-783.62146,-965.0345], a_Tex[-783.62146,-965.0345], a_Dist[1.5]
::draw.vertex[52]: a_Pos[-784.899,-962.885], a_Tex[-784.899,-962.885], a_Dist[-1.5]
::draw.vertex[53]: a_Pos[-783.62146,-965.0345], a_Tex[-783.62146,-965.0345], a_Dist[1.5]
::draw.vertex[54]: a_Pos[-774.14703,-956.7723], a_Tex[-774.14703,-956.7723], a_Dist[-1.5]
::draw.vertex[55]: a_Pos[-772.9537,-958.9696], a_Tex[-772.9537,-958.9696], a_Dist[1.5]
::draw.vertex[56]: a_Pos[-774.0607,-956.72754], a_Tex[-774.0607,-956.72754], a_Dist[-1.5]
::draw.vertex[57]: a_Pos[-772.9537,-958.9696], a_Tex[-772.9537,-958.9696], a_Dist[1.5]
::draw.vertex[58]: a_Pos[-762.8107,-951.4422], a_Tex[-762.8107,-951.4422], a_Dist[-1.5]
::draw.vertex[59]: a_Pos[-761.7921,-953.7258], a_Tex[-761.7921,-953.7258], a_Dist[1.5]
::draw.vertex[60]: a_Pos[-762.72046,-951.40405], a_Tex[-762.72046,-951.40405], a_Dist[-1.5]
::draw.vertex[61]: a_Pos[-761.7921,-953.7258], a_Tex[-761.7921,-953.7258], a_Dist[1.5]
::draw.vertex[62]: a_Pos[-751.0136,-946.98737], a_Tex[-751.0136,-946.98737], a_Dist[-1.5]
::draw.vertex[63]: a_Pos[-750.1774,-949.34393], a_Tex[-750.1774,-949.34393], a_Dist[1.5]
::draw.vertex[64]: a_Pos[-750.91974,-946.9561], a_Tex[-750.91974,-946.9561], a_Dist[-1.5]
::draw.vertex[65]: a_Pos[-750.1774,-949.34393], a_Tex[-750.1774,-949.34393], a_Dist[1.5]
::draw.vertex[66]: a_Pos[-738.79724,-943.4493], a_Tex[-738.79724,-943.4493], a_Dist[-1.5]
::draw.vertex[67]: a_Pos[-738.15045,-945.8647], a_Tex[-738.15045,-945.8647], a_Dist[1.5]
::draw.vertex[68]: a_Pos[-738.7003,-943.42535], a_Tex[-738.7003,-943.42535], a_Dist[-1.5]
::draw.vertex[69]: a_Pos[-738.15045,-945.8647], a_Tex[-738.15045,-945.8647], a_Dist[1.5]
::draw.vertex[70]: a_Pos[-726.2033,-940.8695], a_Tex[-726.2033,-940.8695], a_Dist[-1.5]
::draw.vertex[71]: a_Pos[-725.75165,-943.32886], a_Tex[-725.75165,-943.32886], a_Dist[1.5]
::draw.vertex[72]: a_Pos[-726.10406,-940.85333], a_Tex[-726.10406,-940.85333], a_Dist[-1.5]
::draw.vertex[73]: a_Pos[-725.75165,-943.32886], a_Tex[-725.75165,-943.32886], a_Dist[1.5]
::draw.vertex[74]: a_Pos[-713.27374,-939.28955], a_Tex[-713.27374,-939.28955], a_Dist[-1.5]
::draw.vertex[75]: a_Pos[-713.0466,-941.7804], a_Tex[-713.0466,-941.7804], a_Dist[1.5]
::draw.vertex[76]: a_Pos[-713.1225,-939.2804], a_Tex[-713.1225,-939.2804], a_Dist[-1.5]
::draw.vertex[77]: a_Pos[-713.0466,-941.7804], a_Tex[-713.0466,-941.7804], a_Dist[1.5]
::draw.vertex[78]: a_Pos[-686.8775,-939.2804], a_Tex[-686.8775,-939.2804], a_Dist[-1.5]
::draw.vertex[79]: a_Pos[-686.9534,-941.7804], a_Tex[-686.9534,-941.7804], a_Dist[1.5]
::draw.vertex[80]: a_Pos[-686.72626,-939.28955], a_Tex[-686.72626,-939.28955], a_Dist[-1.5]
::draw.vertex[81]: a_Pos[-686.9534,-941.7804], a_Tex[-686.9534,-941.7804], a_Dist[1.5]
::draw.vertex[82]: a_Pos[-673.89594,-940.85333], a_Tex[-673.89594,-940.85333], a_Dist[-1.5]
::draw.vertex[83]: a_Pos[-674.24835,-943.32886], a_Tex[-674.24835,-943.32886], a_Dist[1.5]
::draw.vertex[84]: a_Pos[-673.7967,-940.8695], a_Tex[-673.7967,-940.8695], a_Dist[-1.5]
::draw.vertex[85]: a_Pos[-674.24835,-943.32886], a_Tex[-674.24835,-943.32886], a_Dist[1.5]
::draw.vertex[86]: a_Pos[-661.2997,-943.42535], a_Tex[-661.2997,-943.42535], a_Dist[-1.5]
::draw.vertex[87]: a_Pos[-661.84955,-945.8647], a_Tex[-661.84955,-945.8647], a_Dist[1.5]
::draw.vertex[88]: a_Pos[-661.20276,-943.4493], a_Tex[-661.20276,-943.4493], a_Dist[-1.5]
::draw.vertex[89]: a_Pos[-661.84955,-945.8647], a_Tex[-661.84955,-945.8647], a_Dist[1.5]
::draw.vertex[90]: a_Pos[-649.08026,-946.9561], a_Tex[-649.08026,-946.9561], a_Dist[-1.5]
::draw.vertex[91]: a_Pos[-649.8226,-949.34393], a_Tex[-649.8226,-949.34393], a_Dist[1.5]
::draw.vertex[92]: a_Pos[-648.9864,-946.98737], a_Tex[-648.9864,-946.98737], a_Dist[-1.5]
::draw.vertex[93]: a_Pos[-649.8226,-949.34393], a_Tex[-649.8226,-949.34393], a_Dist[1.5]
::draw.vertex[94]: a_Pos[-637.27954,-951.40405], a_Tex[-637.27954,-951.40405], a_Dist[-1.5]
::draw.vertex[95]: a_Pos[-638.2079,-953.7258], a_Tex[-638.2079,-953.7258], a_Dist[1.5]
::draw.vertex[96]: a_Pos[-637.1893,-951.4422], a_Tex[-637.1893,-951.4422], a_Dist[-1.5]
::draw.vertex[97]: a_Pos[-638.2079,-953.7258], a_Tex[-638.2079,-953.7258], a_Dist[1.5]
::draw.vertex[98]: a_Pos[-625.9393,-956.72754], a_Tex[-625.9393,-956.72754], a_Dist[-1.5]
::draw.vertex[99]: a_Pos[-627.0463,-958.9696], a_Tex[-627.0463,-958.9696], a_Dist[1.5]
::draw.vertex[100]: a_Pos[-625.85297,-956.7723], a_Tex[-625.85297,-956.7723], a_Dist[-1.5]
::draw.vertex[101]: a_Pos[-627.0463,-958.9696], a_Tex[-627.0463,-958.9696], a_Dist[1.5]
::draw.vertex[102]: a_Pos[-615.101,-962.885], a_Tex[-615.101,-962.885], a_Dist[-1.5]
::draw.vertex[103]: a_Pos[-616.37854,-965.0345], a_Tex[-616.37854,-965.0345], a_Dist[1.5]
::draw.vertex[104]: a_Pos[-615.0191,-962.93585], a_Tex[-615.0191,-962.93585], a_Dist[-1.5]
::draw.vertex[105]: a_Pos[-616.37854,-965.0345], a_Tex[-616.37854,-965.0345], a_Dist[1.5]
::draw.vertex[106]: a_Pos[-604.80634,-969.8349], a_Tex[-604.80634,-969.8349], a_Dist[-1.5]
::draw.vertex[107]: a_Pos[-606.24554,-971.8797], a_Tex[-606.24554,-971.8797], a_Dist[1.5]
::draw.vertex[108]: a_Pos[-604.72906,-969.8916], a_Tex[-604.72906,-969.8916], a_Dist[-1.5]
::draw.vertex[109]: a_Pos[-606.24554,-971.8797], a_Tex[-606.24554,-971.8797], a_Dist[1.5]
::draw.vertex[110]: a_Pos[-595.0967,-977.5357], a_Tex[-595.0967,-977.5357], a_Dist[-1.5]
::draw.vertex[111]: a_Pos[-596.6882,-979.4643], a_Tex[-596.6882,-979.4643], a_Dist[1.5]
::draw.vertex[112]: a_Pos[-595.0242,-977.5979], a_Tex[-595.0242,-977.5979], a_Dist[-1.5]
::draw.vertex[113]: a_Pos[-596.6882,-979.4643], a_Tex[-596.6882,-979.4643], a_Dist[1.5]
::draw.vertex[114]: a_Pos[-586.01337,-985.946], a_Tex[-586.01337,-985.946], a_Dist[-1.5]
::draw.vertex[115]: a_Pos[-587.74744,-987.74744], a_Tex[-587.74744,-987.74744], a_Dist[1.5]
::draw.vertex[116]: a_Pos[-585.946,-986.01337], a_Tex[-585.946,-986.01337], a_Dist[-1.5]
::draw.vertex[117]: a_Pos[-587.74744,-987.74744], a_Tex[-587.74744,-987.74744], a_Dist[1.5]
::draw.vertex[118]: a_Pos[-577.5979,-995.0242], a_Tex[-577.5979,-995.0242], a_Dist[-1.5]
::draw.vertex[119]: a_Pos[-579.4643,-996.6882], a_Tex[-579.4643,-996.6882], a_Dist[1.5]
::draw.vertex[120]: a_Pos[-577.5357,-995.0967], a_Tex[-577.5357,-995.0967], a_Dist[-1.5]
::draw.vertex[121]: a_Pos[-579.4643,-996.6882], a_Tex[-579.4643,-996.6882], a_Dist[1.5]
::draw.vertex[122]: a_Pos[-569.8916,-1004.72906], a_Tex[-569.8916,-1004.72906], a_Dist[-1.5]
::draw.vertex[123]: a_Pos[-571.8797,-1006.24554], a_Tex[-571.8797,-1006.24554], a_Dist[1.5]
::draw.vertex[124]: a_Pos[-569.8349,-1004.80634], a_Tex[-569.8349,-1004.80634], a_Dist[-1.5]
::draw.vertex[125]: a_Pos[-571.8797,-1006.24554], a_Tex[-571.8797,-1006.24554], a_Dist[1.5]
::draw.vertex[126]: a_Pos[-562.93585,-1015.0191], a_Tex[-562.93585,-1015.0191], a_Dist[-1.5]
::draw.vertex[127]: a_Pos[-565.0345,-1016.37854], a_Tex[-565.0345,-1016.37854], a_Dist[1.5]
::draw.vertex[128]: a_Pos[-562.885,-1015.101], a_Tex[-562.885,-1015.101], a_Dist[-1.5]
::draw.vertex[129]: a_Pos[-565.0345,-1016.37854], a_Tex[-565.0345,-1016.37854], a_Dist[1.5]
::draw.vertex[130]: a_Pos[-556.7723,-1025.853], a_Tex[-556.7723,-1025.853], a_Dist[-1.5]
::draw.vertex[131]: a_Pos[-558.9696,-1027.0463], a_Tex[-558.9696,-1027.0463], a_Dist[1.5]
::draw.vertex[132]: a_Pos[-556.72754,-1025.9392], a_Tex[-556.72754,-1025.9392], a_Dist[-1.5]
::draw.vertex[133]: a_Pos[-558.9696,-1027.0463], a_Tex[-558.9696,-1027.0463], a_Dist[1.5]
::draw.vertex[134]: a_Pos[-551.4422,-1037.1892], a_Tex[-551.4422,-1037.1892], a_Dist[-1.5]
::draw.vertex[135]: a_Pos[-553.7258,-1038.2079], a_Tex[-553.7258,-1038.2079], a_Dist[1.5]
::draw.vertex[136]: a_Pos[-551.40405,-1037.2795], a_Tex[-551.40405,-1037.2795], a_Dist[-1.5]
::draw.vertex[137]: a_Pos[-553.7258,-1038.2079], a_Tex[-553.7258,-1038.2079], a_Dist[1.5]
::draw.vertex[138]: a_Pos[-546.98737,-1048.9865], a_Tex[-546.98737,-1048.9865], a_Dist[-1.5]
::draw.vertex[139]: a_Pos[-549.34393,-1049.8225], a_Tex[-549.34393,-1049.8225], a_Dist[1.5]
::draw.vertex[140]: a_Pos[-546.9561,-1049.0802], a_Tex[-546.9561,-1049.0802], a_Dist[-1.5]
::draw.vertex[141]: a_Pos[-549.34393,-1049.8225], a_Tex[-549.34393,-1049.8225], a_Dist[1.5]
::draw.vertex[142]: a_Pos[-543.4493,-1061.2028], a_Tex[-543.4493,-1061.2028], a_Dist[-1.5]
::draw.vertex[143]: a_Pos[-545.8647,-1061.8495], a_Tex[-545.8647,-1061.8495], a_Dist[1.5]
::draw.vertex[144]: a_Pos[-543.42535,-1061.2997], a_Tex[-543.42535,-1061.2997], a_Dist[-1.5]
::draw.vertex[145]: a_Pos[-545.8647,-1061.8495], a_Tex[-545.8647,-1061.8495], a_Dist[1.5]
::draw.vertex[146]: a_Pos[-540.8695,-1073.7968], a_Tex[-540.8695,-1073.7968], a_Dist[-1.5]
::draw.vertex[147]: a_Pos[-543.32886,-1074.2483], a_Tex[-543.32886,-1074.2483], a_Dist[1.5]
::draw.vertex[148]: a_Pos[-540.85333,-1073.896], a_Tex[-540.85333,-1073.896], a_Dist[-1.5]
::draw.vertex[149]: a_Pos[-543.32886,-1074.2483], a_Tex[-543.32886,-1074.2483], a_Dist[1.5]
::draw.vertex[150]: a_Pos[-539.28955,-1086.7263], a_Tex[-539.28955,-1086.7263], a_Dist[-1.5]
::draw.vertex[151]: a_Pos[-541.7804,-1086.9534], a_Tex[-541.7804,-1086.9534], a_Dist[1.5]
::draw.vertex[152]: a_Pos[-539.2804,-1086.8776], a_Tex[-539.2804,-1086.8776], a_Dist[-1.5]
::draw.vertex[153]: a_Pos[-541.7804,-1086.9534], a_Tex[-541.7804,-1086.9534], a_Dist[1.5]
::draw.vertex[154]: a_Pos[-539.2804,-1113.1224], a_Tex[-539.2804,-1113.1224], a_Dist[-1.5]
::draw.vertex[155]: a_Pos[-541.7804,-1113.0466], a_Tex[-541.7804,-1113.0466], a_Dist[1.5]
::draw.vertex[156]: a_Pos[-539.28955,-1113.2737], a_Tex[-539.28955,-1113.2737], a_Dist[-1.5]
::draw.vertex[157]: a_Pos[-541.7804,-1113.0466], a_Tex[-541.7804,-1113.0466], a_Dist[1.5]
::draw.vertex[158]: a_Pos[-540.85333,-1126.104], a_Tex[-540.85333,-1126.104], a_Dist[-1.5]
::draw.vertex[159]: a_Pos[-543.32886,-1125.7517], a_Tex[-543.32886,-1125.7517], a_Dist[1.5]
::draw.vertex[160]: a_Pos[-540.8695,-1126.2032], a_Tex[-540.8695,-1126.2032], a_Dist[-1.5]
::draw.vertex[161]: a_Pos[-543.32886,-1125.7517], a_Tex[-543.32886,-1125.7517], a_Dist[1.5]
::draw.vertex[162]: a_Pos[-543.42535,-1138.7003], a_Tex[-543.42535,-1138.7003], a_Dist[-1.5]
::draw.vertex[163]: a_Pos[-545.8647,-1138.1505], a_Tex[-545.8647,-1138.1505], a_Dist[1.5]
::draw.vertex[164]: a_Pos[-543.4493,-1138.7972], a_Tex[-543.4493,-1138.7972], a_Dist[-1.5]
::draw.vertex[165]: a_Pos[-545.8647,-1138.1505], a_Tex[-545.8647,-1138.1505], a_Dist[1.5]
::draw.vertex[166]: a_Pos[-546.9561,-1150.9198], a_Tex[-546.9561,-1150.9198], a_Dist[-1.5]
::draw.vertex[167]: a_Pos[-549.34393,-1150.1775], a_Tex[-549.34393,-1150.1775], a_Dist[1.5]
::draw.vertex[168]: a_Pos[-546.98737,-1151.0135], a_Tex[-546.98737,-1151.0135], a_Dist[-1.5]
::draw.vertex[169]: a_Pos[-549.34393,-1150.1775], a_Tex[-549.34393,-1150.1775], a_Dist[1.5]
::draw.vertex[170]: a_Pos[-551.40405,-1162.7205], a_Tex[-551.40405,-1162.7205], a_Dist[-1.5]
::draw.vertex[171]: a_Pos[-553.7258,-1161.7921], a_Tex[-553.7258,-1161.7921], a_Dist[1.5]
::draw.vertex[172]: a_Pos[-551.4422,-1162.8108], a_Tex[-551.4422,-1162.8108], a_Dist[-1.5]
::draw.vertex[173]: a_Pos[-553.7258,-1161.7921], a_Tex[-553.7258,-1161.7921], a_Dist[1.5]
::draw.vertex[174]: a_Pos[-556.72754,-1174.0608], a_Tex[-556.72754,-1174.0608], a_Dist[-1.5]
::draw.vertex[175]: a_Pos[-558.9696,-1172.9537], a_Tex[-558.9696,-1172.9537], a_Dist[1.5]
::draw.vertex[176]: a_Pos[-556.7723,-1174.147], a_Tex[-556.7723,-1174.147], a_Dist[-1.5]
::draw.vertex[177]: a_Pos[-558.9696,-1172.9537], a_Tex[-558.9696,-1172.9537], a_Dist[1.5]
::draw.vertex[178]: a_Pos[-562.885,-1184.8989], a_Tex[-562.885,-1184.8989], a_Dist[-1.5]
::draw.vertex[179]: a_Pos[-565.0345,-1183.6215], a_Tex[-565.0345,-1183.6215], a_Dist[1.5]
::draw.vertex[180]: a_Pos[-562.93585,-1184.9808], a_Tex[-562.93585,-1184.9808], a_Dist[-1.5]
::draw.vertex[181]: a_Pos[-565.0345,-1183.6215], a_Tex[-565.0345,-1183.6215], a_Dist[1.5]
::draw.vertex[182]: a_Pos[-569.8349,-1195.1936], a_Tex[-569.8349,-1195.1936], a_Dist[-1.5]
::draw.vertex[183]: a_Pos[-571.8797,-1193.7545], a_Tex[-571.8797,-1193.7545], a_Dist[1.5]
::draw.vertex[184]: a_Pos[-569.8916,-1195.271], a_Tex[-569.8916,-1195.271], a_Dist[-1.5]
::draw.vertex[185]: a_Pos[-571.8797,-1193.7545], a_Tex[-571.8797,-1193.7545], a_Dist[1.5]
::draw.vertex[186]: a_Pos[-577.5357,-1204.9033], a_Tex[-577.5357,-1204.9033], a_Dist[-1.5]
::draw.vertex[187]: a_Pos[-579.4643,-1203.3118], a_Tex[-579.4643,-1203.3118], a_Dist[1.5]
::draw.vertex[188]: a_Pos[-577.5979,-1204.9758], a_Tex[-577.5979,-1204.9758], a_Dist[-1.5]
::draw.vertex[189]: a_Pos[-579.4643,-1203.3118], a_Tex[-579.4643,-1203.3118], a_Dist[1.5]
::draw.vertex[190]: a_Pos[-585.946,-1213.9866], a_Tex[-585.946,-1213.9866], a_Dist[-1.5]
::draw.vertex[191]: a_Pos[-587.74744,-1212.2526], a_Tex[-587.74744,-1212.2526], a_Dist[1.5]
::draw.vertex[192]: a_Pos[-586.01337,-1214.0541], a_Tex[-586.01337,-1214.0541], a_Dist[-1.5]
::draw.vertex[193]: a_Pos[-587.74744,-1212.2526], a_Tex[-587.74744,-1212.2526], a_Dist[1.5]
::draw.vertex[194]: a_Pos[-595.0242,-1222.4021], a_Tex[-595.0242,-1222.4021], a_Dist[-1.5]
::draw.vertex[195]: a_Pos[-596.6882,-1220.5358], a_Tex[-596.6882,-1220.5358], a_Dist[1.5]
::draw.vertex[196]: a_Pos[-595.0967,-1222.4642], a_Tex[-595.0967,-1222.4642], a_Dist[-1.5]
::draw.vertex[197]: a_Pos[-596.6882,-1220.5358], a_Tex[-596.6882,-1220.5358], a_Dist[1.5]
::draw.vertex[198]: a_Pos[-604.72906,-1230.1084], a_Tex[-604.72906,-1230.1084], a_Dist[-1.5]
::draw.vertex[199]: a_Pos[-606.24554,-1228.1204], a_Tex[-606.24554,-1228.1204], a_Dist[1.5]
::draw.vertex[200]: a_Pos[-604.80634,-1230.165], a_Tex[-604.80634,-1230.165], a_Dist[-1.5]
::draw.vertex[201]: a_Pos[-606.24554,-1228.1204], a_Tex[-606.24554,-1228.1204], a_Dist[1.5]
::draw.vertex[202]: a_Pos[-615.0191,-1237.0641], a_Tex[-615.0191,-1237.0641], a_Dist[-1.5]
::draw.vertex[203]: a_Pos[-616.37854,-1234.9655], a_Tex[-616.37854,-1234.9655], a_Dist[1.5]
::draw.vertex[204]: a_Pos[-615.101,-1237.115], a_Tex[-615.101,-1237.115], a_Dist[-1.5]
::draw.vertex[205]: a_Pos[-616.37854,-1234.9655], a_Tex[-616.37854,-1234.9655], a_Dist[1.5]
::draw.vertex[206]: a_Pos[-625.85297,-1243.2278], a_Tex[-625.85297,-1243.2278], a_Dist[-1.5]
::draw.vertex[207]: a_Pos[-627.0463,-1241.0304], a_Tex[-627.0463,-1241.0304], a_Dist[1.5]
::draw.vertex[208]: a_Pos[-625.9393,-1243.2725], a_Tex[-625.9393,-1243.2725], a_Dist[-1.5]
::draw.vertex[209]: a_Pos[-627.0463,-1241.0304], a_Tex[-627.0463,-1241.0304], a_Dist[1.5]
::draw.vertex[210]: a_Pos[-637.1893,-1248.5577], a_Tex[-637.1893,-1248.5577], a_Dist[-1.5]
::draw.vertex[211]: a_Pos[-638.2079,-1246.2742], a_Tex[-638.2079,-1246.2742], a_Dist[1.5]
::draw.vertex[212]: a_Pos[-637.27954,-1248.596], a_Tex[-637.27954,-1248.596], a_Dist[-1.5]
::draw.vertex[213]: a_Pos[-638.2079,-1246.2742], a_Tex[-638.2079,-1246.2742], a_Dist[1.5]
::draw.vertex[214]: a_Pos[-648.9864,-1253.0126], a_Tex[-648.9864,-1253.0126], a_Dist[-1.5]
::draw.vertex[215]: a_Pos[-649.8226,-1250.6561], a_Tex[-649.8226,-1250.6561], a_Dist[1.5]
::draw.vertex[216]: a_Pos[-649.08026,-1253.0438], a_Tex[-649.08026,-1253.0438], a_Dist[-1.5]
::draw.vertex[217]: a_Pos[-649.8226,-1250.6561], a_Tex[-649.8226,-1250.6561], a_Dist[1.5]
::draw.vertex[218]: a_Pos[-661.20276,-1256.5508], a_Tex[-661.20276,-1256.5508], a_Dist[-1.5]
::draw.vertex[219]: a_Pos[-661.84955,-1254.1354], a_Tex[-661.84955,-1254.1354], a_Dist[1.5]
::draw.vertex[220]: a_Pos[-661.2997,-1256.5746], a_Tex[-661.2997,-1256.5746], a_Dist[-1.5]
::draw.vertex[221]: a_Pos[-661.84955,-1254.1354], a_Tex[-661.84955,-1254.1354], a_Dist[1.5]
::draw.vertex[222]: a_Pos[-673.7967,-1259.1305], a_Tex[-673.7967,-1259.1305], a_Dist[-1.5]
::draw.vertex[223]: a_Pos[-674.24835,-1256.6711], a_Tex[-674.24835,-1256.6711], a_Dist[1.5]
::draw.vertex[224]: a_Pos[-673.89594,-1259.1467], a_Tex[-673.89594,-1259.1467], a_Dist[-1.5]
::draw.vertex[225]: a_Pos[-674.24835,-1256.6711], a_Tex[-674.24835,-1256.6711], a_Dist[1.5]
::draw.vertex[226]: a_Pos[-686.72626,-1260.7104], a_Tex[-686.72626,-1260.7104], a_Dist[-1.5]
::draw.vertex[227]: a_Pos[-686.9534,-1258.2196], a_Tex[-686.9534,-1258.2196], a_Dist[1.5]
::draw.vertex[228]: a_Pos[-686.8775,-1260.7196], a_Tex[-686.8775,-1260.7196], a_Dist[-1.5]
::draw.vertex[229]: a_Pos[-686.9534,-1258.2196], a_Tex[-686.9534,-1258.2196], a_Dist[1.5]
::draw.vertex[230]: a_Pos[-713.1225,-1260.7196], a_Tex[-713.1225,-1260.7196], a_Dist[-1.5]
::draw.vertex[231]: a_Pos[-713.0466,-1258.2196], a_Tex[-713.0466,-1258.2196], a_Dist[1.5]
::draw.vertex[232]: a_Pos[-713.27374,-1260.7104], a_Tex[-713.27374,-1260.7104], a_Dist[-1.5]
::draw.vertex[233]: a_Pos[-713.0466,-1258.2196], a_Tex[-713.0466,-1258.2196], a_Dist[1.5]
::draw.vertex[234]: a_Pos[-726.10406,-1259.1467], a_Tex[-726.10406,-1259.1467], a_Dist[-1.5]
::draw.vertex[235]: a_Pos[-725.75165,-1256.6711], a_Tex[-725.75165,-1256.6711], a_Dist[1.5]
::draw.vertex[236]: a_Pos[-726.2033,-1259.1305], a_Tex[-726.2033,-1259.1305], a_Dist[-1.5]
::draw.vertex[237]: a_Pos[-725.75165,-1256.6711], a_Tex[-725.75165,-1256.6711], a_Dist[1.5]
::draw.vertex[238]: a_Pos[-738.7003,-1256.5746], a_Tex[-738.7003,-1256.5746], a_Dist[-1.5]
::draw.vertex[239]: a_Pos[-738.15045,-1254.1354], a_Tex[-738.15045,-1254.1354], a_Dist[1.5]
::draw.vertex[240]: a_Pos[-738.79724,-1256.5508], a_Tex[-738.79724,-1256.5508], a_Dist[-1.5]
::draw.vertex[241]: a_Pos[-738.15045,-1254.1354], a_Tex[-738.15045,-1254.1354], a_Dist[1.5]
::draw.vertex[242]: a_Pos[-750.91974,-1253.0438], a_Tex[-750.91974,-1253.0438], a_Dist[-1.5]
::draw.vertex[243]: a_Pos[-750.1774,-1250.6561], a_Tex[-750.1774,-1250.6561], a_Dist[1.5]
::draw.vertex[244]: a_Pos[-751.0136,-1253.0126], a_Tex[-751.0136,-1253.0126], a_Dist[-1.5]
::draw.vertex[245]: a_Pos[-750.1774,-1250.6561], a_Tex[-750.1774,-1250.6561], a_Dist[1.5]
::draw.vertex[246]: a_Pos[-762.72046,-1248.596], a_Tex[-762.72046,-1248.596], a_Dist[-1.5]
::draw.vertex[247]: a_Pos[-761.7921,-1246.2742], a_Tex[-761.7921,-1246.2742], a_Dist[1.5]
::draw.vertex[248]: a_Pos[-762.8107,-1248.5577], a_Tex[-762.8107,-1248.5577], a_Dist[-1.5]
::draw.vertex[249]: a_Pos[-761.7921,-1246.2742], a_Tex[-761.7921,-1246.2742], a_Dist[1.5]
::draw.vertex[250]: a_Pos[-774.0607,-1243.2725], a_Tex[-774.0607,-1243.2725], a_Dist[-1.5]
::draw.vertex[251]: a_Pos[-772.9537,-1241.0304], a_Tex[-772.9537,-1241.0304], a_Dist[1.5]
::draw.vertex[252]: a_Pos[-774.14703,-1243.2278], a_Tex[-774.14703,-1243.2278], a_Dist[-1.5]
::draw.vertex[253]: a_Pos[-772.9537,-1241.0304], a_Tex[-772.9537,-1241.0304], a_Dist[1.5]
::draw.vertex[254]: a_Pos[-784.899,-1237.115], a_Tex[-784.899,-1237.115], a_Dist[-1.5]
::draw.vertex[255]: a_Pos[-783.62146,-1234.9655], a_Tex[-783.62146,-1234.9655], a_Dist[1.5]
::draw.vertex[256]: a_Pos[-784.9809,-1237.0641], a_Tex[-784.9809,-1237.0641], a_Dist[-1.5]
::draw.vertex[257]: a_Pos[-783.62146,-1234.9655], a_Tex[-783.62146,-1234.9655], a_Dist[1.5]
::draw.vertex[258]: a_Pos[-795.19366,-1230.165], a_Tex[-795.19366,-1230.165], a_Dist[-1.5]
::draw.vertex[259]: a_Pos[-793.75446,-1228.1204], a_Tex[-793.75446,-1228.1204], a_Dist[1.5]
::draw.vertex[260]: a_Pos[-795.27094,-1230.1084], a_Tex[-795.27094,-1230.1084], a_Dist[-1.5]
::draw.vertex[261]: a_Pos[-793.75446,-1228.1204], a_Tex[-793.75446,-1228.1204], a_Dist[1.5]
::draw.vertex[262]: a_Pos[-804.9033,-1222.4642], a_Tex[-804.9033,-1222.4642], a_Dist[-1.5]
::draw.vertex[263]: a_Pos[-803.3118,-1220.5358], a_Tex[-803.3118,-1220.5358], a_Dist[1.5]
::draw.vertex[264]: a_Pos[-804.9758,-1222.4021], a_Tex[-804.9758,-1222.4021], a_Dist[-1.5]
::draw.vertex[265]: a_Pos[-803.3118,-1220.5358], a_Tex[-803.3118,-1220.5358], a_Dist[1.5]
::draw.vertex[266]: a_Pos[-813.98663,-1214.0541], a_Tex[-813.98663,-1214.0541], a_Dist[-1.5]
::draw.vertex[267]: a_Pos[-812.25256,-1212.2526], a_Tex[-812.25256,-1212.2526], a_Dist[1.5]
::draw.vertex[268]: a_Pos[-814.054,-1213.9866], a_Tex[-814.054,-1213.9866], a_Dist[-1.5]
::draw.vertex[269]: a_Pos[-812.25256,-1212.2526], a_Tex[-812.25256,-1212.2526], a_Dist[1.5]
::draw.vertex[270]: a_Pos[-822.4021,-1204.9758], a_Tex[-822.4021,-1204.9758], a_Dist[-1.5]
::draw.vertex[271]: a_Pos[-820.5357,-1203.3118], a_Tex[-820.5357,-1203.3118], a_Dist[1.5]
::draw.vertex[272]: a_Pos[-822.4643,-1204.9033], a_Tex[-822.4643,-1204.9033], a_Dist[-1.5]
::draw.vertex[273]: a_Pos[-820.5357,-1203.3118], a_Tex[-820.5357,-1203.3118], a_Dist[1.5]
::draw.vertex[274]: a_Pos[-830.1084,-1195.271], a_Tex[-830.1084,-1195.271], a_Dist[-1.5]
::draw.vertex[275]: a_Pos[-828.1203,-1193.7545], a_Tex[-828.1203,-1193.7545], a_Dist[1.5]
::draw.vertex[276]: a_Pos[-830.1651,-1195.1936], a_Tex[-830.1651,-1195.1936], a_Dist[-1.5]
::draw.vertex[277]: a_Pos[-828.1203,-1193.7545], a_Tex[-828.1203,-1193.7545], a_Dist[1.5]
::draw.vertex[278]: a_Pos[-837.06415,-1184.9808], a_Tex[-837.06415,-1184.9808], a_Dist[-1.5]
::draw.vertex[279]: a_Pos[-834.9655,-1183.6215], a_Tex[-834.9655,-1183.6215], a_Dist[1.5]
::draw.vertex[280]: a_Pos[-837.115,-1184.8989], a_Tex[-837.115,-1184.8989], a_Dist[-1.5]
::draw.vertex[281]: a_Pos[-834.9655,-1183.6215], a_Tex[-834.9655,-1183.6215], a_Dist[1.5]
::draw.vertex[282]: a_Pos[-843.2277,-1174.147], a_Tex[-843.2277,-1174.147], a_Dist[-1.5]
::draw.vertex[283]: a_Pos[-841.0304,-1172.9537], a_Tex[-841.0304,-1172.9537], a_Dist[1.5]
::draw.vertex[284]: a_Pos[-843.27246,-1174.0608], a_Tex[-843.27246,-1174.0608], a_Dist[-1.5]
::draw.vertex[285]: a_Pos[-841.0304,-1172.9537], a_Tex[-841.0304,-1172.9537], a_Dist[1.5]
::draw.vertex[286]: a_Pos[-848.5578,-1162.8108], a_Tex[-848.5578,-1162.8108], a_Dist[-1.5]
::draw.vertex[287]: a_Pos[-846.2742,-1161.7921], a_Tex[-846.2742,-1161.7921], a_Dist[1.5]
::draw.vertex[288]: a_Pos[-848.59595,-1162.7205], a_Tex[-848.59595,-1162.7205], a_Dist[-1.5]
::draw.vertex[289]: a_Pos[-846.2742,-1161.7921], a_Tex[-846.2742,-1161.7921], a_Dist[1.5]
::draw.vertex[290]: a_Pos[-853.01263,-1151.0135], a_Tex[-853.01263,-1151.0135], a_Dist[-1.5]
::draw.vertex[291]: a_Pos[-850.65607,-1150.1775], a_Tex[-850.65607,-1150.1775], a_Dist[1.5]
::draw.vertex[292]: a_Pos[-853.0439,-1150.9198], a_Tex[-853.0439,-1150.9198], a_Dist[-1.5]
::draw.vertex[293]: a_Pos[-850.65607,-1150.1775], a_Tex[-850.65607,-1150.1775], a_Dist[1.5]
::draw.vertex[294]: a_Pos[-856.5507,-1138.7972], a_Tex[-856.5507,-1138.7972], a_Dist[-1.5]
::draw.vertex[295]: a_Pos[-854.1353,-1138.1505], a_Tex[-854.1353,-1138.1505], a_Dist[1.5]
::draw.vertex[296]: a_Pos[-856.57465,-1138.7003], a_Tex[-856.57465,-1138.7003], a_Dist[-1.5]
::draw.vertex[297]: a_Pos[-854.1353,-1138.1505], a_Tex[-854.1353,-1138.1505], a_Dist[1.5]
::draw.vertex[298]: a_Pos[-859.1305,-1126.2032], a_Tex[-859.1305,-1126.2032], a_Dist[-1.5]
::draw.vertex[299]: a_Pos[-856.67114,-1125.7517], a_Tex[-856.67114,-1125.7517], a_Dist[1.5]
::draw.vertex[300]: a_Pos[-859.14667,-1126.104], a_Tex[-859.14667,-1126.104], a_Dist[-1.5]
::draw.vertex[301]: a_Pos[-856.67114,-1125.7517], a_Tex[-856.67114,-1125.7517], a_Dist[1.5]
::draw.vertex[302]: a_Pos[-860.71045,-1113.2737], a_Tex[-860.71045,-1113.2737], a_Dist[-1.5]
::draw.vertex[303]: a_Pos[-858.22266,-1113.0215], a_Tex[-858.22266,-1113.0215], a_Dist[1.5]
::draw.vertex[304]: a_Pos[-860.71857,-1113.173], a_Tex[-860.71857,-1113.173], a_Dist[-1.5]
::draw.vertex[305]: a_Pos[-858.22266,-1113.0215], a_Tex[-858.22266,-1113.0215], a_Dist[1.5]
::draw.vertex[306]: a_Pos[-861.24896,-1100.0505], a_Tex[-861.24896,-1100.0505], a_Dist[-1.5]
::draw.vertex[307]: a_Pos[-858.74896,-1100], a_Tex[-858.74896,-1100], a_Dist[1.5]
::draw.vertex[308]: a_Pos[-861.24896,-1099.9495], a_Tex[-861.24896,-1099.9495], a_Dist[-1.5]
::draw.vertex[309]: a_Pos[-858.74896,-1100], a_Tex[-858.74896,-1100], a_Dist[1.5]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform vec4 u_Color;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
void main() {
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	gl_FragColor = u_Color;
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=4, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Color, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Color) = [1.0, 1.0, 0.0, 1.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 1.0
::draw.uniform.Uniform(u_LineWidth) = 1.0E7
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.ERROR.Unexpected:[Attribute(a_Dist)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[4][1]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0]
::draw.vertex[1]: a_Pos[200,0], a_Tex[100,0]
::draw.vertex[2]: a_Pos[200,200], a_Tex[100,100]
::draw.vertex[3]: a_Pos[0,200], a_Tex[0,100]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform vec4 u_Color;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
void main() {
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	gl_FragColor = u_Color;
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=9, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos], uniforms=[u_ProjMat, u_ViewMat])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=ALWAYS, actionOnBothPass=INVERT, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=0, readMask=255, writeMask=1)
::draw.blending=Blending(srcRGB=ONE, dstRGB=ZERO, srcA=ONE, dstA=ZERO, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=false, green=false, blue=false, alpha=false)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[5][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8]
::draw.vertex[0]: a_Pos[-700,-1100]
::draw.vertex[1]: a_Pos[-700,-980]
::draw.vertex[2]: a_Pos[-803.92303,-1040]
::draw.vertex[3]: a_Pos[-803.92303,-1160]
::draw.vertex[4]: a_Pos[-700,-1220]
::draw.vertex[5]: a_Pos[-596.07697,-1160]
::draw.vertex[6]: a_Pos[-596.07697,-1040]
::draw.vertex[7]: a_Pos[-700,-980]
::draw.vertex[8]: a_Pos[-700,-980]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
void main() {
	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

draw(vertexCount=26, instances=1, indices=null, type=TRIANGLE_STRIP, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Color, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=NOT_EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Color) = [1.0, 0.0, 0.0, 1.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 1.0
::draw.uniform.Uniform(u_LineWidth) = 1.25
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[5][0]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.attribute[6][0]=Attribute(a_Dist, type=Float1, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
::draw.vertex[0]: a_Pos[-700,-981.44336], a_Tex[-700,-981.44336], a_Dist[-1.5]
::draw.vertex[1]: a_Pos[-700.625,-978.9175], a_Tex[-700.625,-978.9175], a_Dist[1.5]
::draw.vertex[2]: a_Pos[-802.67303,-1040.7217], a_Tex[-802.67303,-1040.7217], a_Dist[-1.5]
::draw.vertex[3]: a_Pos[-804.54803,-1038.9175], a_Tex[-804.54803,-1038.9175], a_Dist[1.5]
::draw.vertex[4]: a_Pos[-802.67303,-1040.7217], a_Tex[-802.67303,-1040.7217], a_Dist[-1.5]
::draw.vertex[5]: a_Pos[-805.17303,-1040], a_Tex[-805.17303,-1040], a_Dist[1.5]
::draw.vertex[6]: a_Pos[-802.67303,-1159.2783], a_Tex[-802.67303,-1159.2783], a_Dist[-1.5]
::draw.vertex[7]: a_Pos[-805.17303,-1160], a_Tex[-805.17303,-1160], a_Dist[1.5]
::draw.vertex[8]: a_Pos[-802.67303,-1159.2783], a_Tex[-802.67303,-1159.2783], a_Dist[-1.5]
::draw.vertex[9]: a_Pos[-804.54803,-1161.0825], a_Tex[-804.54803,-1161.0825], a_Dist[1.5]
::draw.vertex[10]: a_Pos[-700,-1218.5566], a_Tex[-700,-1218.5566], a_Dist[-1.5]
::draw.vertex[11]: a_Pos[-700.625,-1221.0825], a_Tex[-700.625,-1221.0825], a_Dist[1.5]
::draw.vertex[12]: a_Pos[-700,-1218.5566], a_Tex[-700,-1218.5566], a_Dist[-1.5]
::draw.vertex[13]: a_Pos[-699.375,-1221.0825], a_Tex[-699.375,-1221.0825], a_Dist[1.5]
::draw.vertex[14]: a_Pos[-597.32697,-1159.2783], a_Tex[-597.32697,-1159.2783], a_Dist[-1.5]
::draw.vertex[15]: a_Pos[-595.45197,-1161.0825], a_Tex[-595.45197,-1161.0825], a_Dist[1.5]
::draw.vertex[16]: a_Pos[-597.32697,-1159.2783], a_Tex[-597.32697,-1159.2783], a_Dist[-1.5]
::draw.vertex[17]: a_Pos[-594.82697,-1160], a_Tex[-594.82697,-1160], a_Dist[1.5]
::draw.vertex[18]: a_Pos[-597.32697,-1040.7217], a_Tex[-597.32697,-1040.7217], a_Dist[-1.5]
::draw.vertex[19]: a_Pos[-594.82697,-1040], a_Tex[-594.82697,-1040], a_Dist[1.5]
::draw.vertex[20]: a_Pos[-597.32697,-1040.7217], a_Tex[-597.32697,-1040.7217], a_Dist[-1.5]
::draw.vertex[21]: a_Pos[-595.45197,-1038.9175], a_Tex[-595.45197,-1038.9175], a_Dist[1.5]
::draw.vertex[22]: a_Pos[-700,-981.44336], a_Tex[-700,-981.44336], a_Dist[-1.5]
::draw.vertex[23]: a_Pos[-699.375,-978.9175], a_Tex[-699.375,-978.9175], a_Dist[1.5]
::draw.vertex[24]: a_Pos[-700,-981.44336], a_Tex[-700,-981.44336], a_Dist[-1.5]
::draw.vertex[25]: a_Pos[-700.625,-978.9175], a_Tex[-700.625,-978.9175], a_Dist[1.5]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform vec4 u_Color;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
void main() {
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	gl_FragColor = u_Color;
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=4, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Color, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Color) = [1.0, 0.0, 0.0, 1.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 1.0
::draw.uniform.Uniform(u_LineWidth) = 1.0E7
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.ERROR.Unexpected:[Attribute(a_Dist)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[4][1]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0]
::draw.vertex[1]: a_Pos[200,0], a_Tex[100,0]
::draw.vertex[2]: a_Pos[200,200], a_Tex[100,100]
::draw.vertex[3]: a_Pos[0,200], a_Tex[0,100]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform vec4 u_Color;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
void main() {
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	gl_FragColor = u_Color;
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=7, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos], uniforms=[u_ProjMat, u_ViewMat])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=ALWAYS, actionOnBothPass=INVERT, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=0, readMask=255, writeMask=1)
::draw.blending=Blending(srcRGB=ONE, dstRGB=ZERO, srcA=ONE, dstA=ZERO, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=false, green=false, blue=false, alpha=false)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[5][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6]
::draw.vertex[0]: a_Pos[-700,-380]
::draw.vertex[1]: a_Pos[-300,20]
::draw.vertex[2]: a_Pos[-1100,20]
::draw.vertex[3]: a_Pos[-1100,-780]
::draw.vertex[4]: a_Pos[-300,-780]
::draw.vertex[5]: a_Pos[-300,20]
::draw.vertex[6]: a_Pos[-300,20]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
void main() {
	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

draw(vertexCount=18, instances=1, indices=null, type=TRIANGLE_STRIP, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Tex, u_Transform, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=NOT_EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex) = TextureUnit(texture=Texture[0], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Transform) = Matrix3D(
  [ -0.00390625, 4.783777E-19, 0, 0.09765625 ],
  [ -4.783777E-19, -0.00390625, 0, 0.09765625 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_GlobalAlpha) = 0.75
::draw.uniform.Uniform(u_LineWidth) = 1.25
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[5][0]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.attribute[6][0]=Attribute(a_Dist, type=Float1, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
::draw.vertex[0]: a_Pos[-301.25,18.75], a_Tex[-301.25,18.75], a_Dist[-1.5]
::draw.vertex[1]: a_Pos[-300,21.25], a_Tex[-300,21.25], a_Dist[1.5]
::draw.vertex[2]: a_Pos[-1098.75,18.75], a_Tex[-1098.75,18.75], a_Dist[-1.5]
::draw.vertex[3]: a_Pos[-1100,21.25], a_Tex[-1100,21.25], a_Dist[1.5]
::draw.vertex[4]: a_Pos[-1098.75,18.75], a_Tex[-1098.75,18.75], a_Dist[-1.5]
::draw.vertex[5]: a_Pos[-1101.25,20], a_Tex[-1101.25,20], a_Dist[1.5]
::draw.vertex[6]: a_Pos[-1098.75,-778.75], a_Tex[-1098.75,-778.75], a_Dist[-1.5]
::draw.vertex[7]: a_Pos[-1101.25,-780], a_Tex[-1101.25,-780], a_Dist[1.5]
::draw.vertex[8]: a_Pos[-1098.75,-778.75], a_Tex[-1098.75,-778.75], a_Dist[-1.5]
::draw.vertex[9]: a_Pos[-1100,-781.25], a_Tex[-1100,-781.25], a_Dist[1.5]
::draw.vertex[10]: a_Pos[-301.25,-778.75], a_Tex[-301.25,-778.75], a_Dist[-1.5]
::draw.vertex[11]: a_Pos[-300,-781.25], a_Tex[-300,-781.25], a_Dist[1.5]
::draw.vertex[12]: a_Pos[-301.25,-778.75], a_Tex[-301.25,-778.75], a_Dist[-1.5]
::draw.vertex[13]: a_Pos[-298.75,-780], a_Tex[-298.75,-780], a_Dist[1.5]
::draw.vertex[14]: a_Pos[-301.25,18.75], a_Tex[-301.25,18.75], a_Dist[-1.5]
::draw.vertex[15]: a_Pos[-298.75,20], a_Tex[-298.75,20], a_Dist[1.5]
::draw.vertex[16]: a_Pos[-301.25,18.75], a_Tex[-301.25,18.75], a_Dist[-1.5]
::draw.vertex[17]: a_Pos[-300,21.25], a_Tex[-300,21.25], a_Dist[1.5]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform sampler2D u_Tex;
uniform mat4 u_Transform;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
varying mediump vec2 v_Tex;
void main() {
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	gl_FragColor = texture2D(u_Tex, fract(vec2((u_Transform * vec4(v_Tex, 0.0, 1.0)).xy)));
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=4, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Tex, u_Transform, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex) = TextureUnit(texture=Texture[0], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Transform) = Matrix3D(
  [ -0.00390625, 4.783777E-19, 0, -0.68359375 ],
  [ -4.783777E-19, -0.00390625, 0, -0.05859375 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_GlobalAlpha) = 0.75
::draw.uniform.Uniform(u_LineWidth) = 1.0E7
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.ERROR.Unexpected:[Attribute(a_Dist)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[4][1]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0]
::draw.vertex[1]: a_Pos[200,0], a_Tex[100,0]
::draw.vertex[2]: a_Pos[200,200], a_Tex[100,100]
::draw.vertex[3]: a_Pos[0,200], a_Tex[0,100]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform sampler2D u_Tex;
uniform mat4 u_Transform;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
varying mediump vec2 v_Tex;
void main() {
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	gl_FragColor = texture2D(u_Tex, fract(vec2((u_Transform * vec4(v_Tex, 0.0, 1.0)).xy)));
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=7, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos], uniforms=[u_ProjMat, u_ViewMat])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=ALWAYS, actionOnBothPass=INVERT, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=0, readMask=255, writeMask=1)
::draw.blending=Blending(srcRGB=ONE, dstRGB=ZERO, srcA=ONE, dstA=ZERO, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=false, green=false, blue=false, alpha=false)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[5][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6]
::draw.vertex[0]: a_Pos[-1500,-380]
::draw.vertex[1]: a_Pos[-1100,20]
::draw.vertex[2]: a_Pos[-1900,20]
::draw.vertex[3]: a_Pos[-1900,-780]
::draw.vertex[4]: a_Pos[-1100,-780]
::draw.vertex[5]: a_Pos[-1100,20]
::draw.vertex[6]: a_Pos[-1100,20]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
void main() {
	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

draw(vertexCount=697, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos], uniforms=[u_ProjMat, u_ViewMat])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=ALWAYS, actionOnBothPass=INVERT, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=0, readMask=255, writeMask=2)
::draw.blending=Blending(srcRGB=ONE, dstRGB=ZERO, srcA=ONE, dstA=ZERO, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=false, green=false, blue=false, alpha=false)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696]
::draw.vertex[0]: a_Pos[-1100,-380]
::draw.vertex[1]: a_Pos[-300,20]
::draw.vertex[2]: a_Pos[-1100,20]
::draw.vertex[3]: a_Pos[-1100,-780]
::draw.vertex[4]: a_Pos[-300,-780]
::draw.vertex[5]: a_Pos[-300,20]
::draw.vertex[6]: a_Pos[-1900,-380]
::draw.vertex[7]: a_Pos[-1899.982,-376.17334]
::draw.vertex[8]: a_Pos[-1899.9285,-372.35522]
::draw.vertex[9]: a_Pos[-1899.8391,-368.5458]
::draw.vertex[10]: a_Pos[-1899.7145,-364.74527]
::draw.vertex[11]: a_Pos[-1899.5546,-360.95374]
::draw.vertex[12]: a_Pos[-1899.3595,-357.17142]
::draw.vertex[13]: a_Pos[-1899.1295,-353.3984]
::draw.vertex[14]: a_Pos[-1898.8647,-349.6349]
::draw.vertex[15]: a_Pos[-1898.5653,-345.88104]
::draw.vertex[16]: a_Pos[-1898.2314,-342.13702]
::draw.vertex[17]: a_Pos[-1897.8632,-338.40295]
::draw.vertex[18]: a_Pos[-1897.4608,-334.67905]
::draw.vertex[19]: a_Pos[-1897.0245,-330.96542]
::draw.vertex[20]: a_Pos[-1896.5543,-327.26224]
::draw.vertex[21]: a_Pos[-1896.0504,-323.56967]
::draw.vertex[22]: a_Pos[-1895.5131,-319.88788]
::draw.vertex[23]: a_Pos[-1894.9424,-316.217]
::draw.vertex[24]: a_Pos[-1894.3385,-312.55725]
::draw.vertex[25]: a_Pos[-1893.7015,-308.90872]
::draw.vertex[26]: a_Pos[-1893.0316,-305.2716]
::draw.vertex[27]: a_Pos[-1892.3291,-301.64606]
::draw.vertex[28]: a_Pos[-1891.594,-298.03226]
::draw.vertex[29]: a_Pos[-1890.8264,-294.4303]
::draw.vertex[30]: a_Pos[-1890.0266,-290.84042]
::draw.vertex[31]: a_Pos[-1889.1948,-287.26273]
::draw.vertex[32]: a_Pos[-1888.3309,-283.6974]
::draw.vertex[33]: a_Pos[-1887.4354,-280.1446]
::draw.vertex[34]: a_Pos[-1886.5083,-276.60446]
::draw.vertex[35]: a_Pos[-1885.5497,-273.07718]
::draw.vertex[36]: a_Pos[-1884.5598,-269.56287]
::draw.vertex[37]: a_Pos[-1883.5387,-266.06174]
::draw.vertex[38]: a_Pos[-1882.4867,-262.5739]
::draw.vertex[39]: a_Pos[-1881.4039,-259.09958]
::draw.vertex[40]: a_Pos[-1880.2904,-255.63889]
::draw.vertex[41]: a_Pos[-1879.1465,-252.19196]
::draw.vertex[42]: a_Pos[-1877.9722,-248.759]
::draw.vertex[43]: a_Pos[-1876.7677,-245.34015]
::draw.vertex[44]: a_Pos[-1875.5332,-241.93558]
::draw.vertex[45]: a_Pos[-1874.2689,-238.54541]
::draw.vertex[46]: a_Pos[-1872.9749,-235.16986]
::draw.vertex[47]: a_Pos[-1871.6512,-231.80905]
::draw.vertex[48]: a_Pos[-1870.2983,-228.46313]
::draw.vertex[49]: a_Pos[-1868.9161,-225.1323]
::draw.vertex[50]: a_Pos[-1867.5049,-221.81668]
::draw.vertex[51]: a_Pos[-1866.0647,-218.51645]
::draw.vertex[52]: a_Pos[-1864.5958,-215.23175]
::draw.vertex[53]: a_Pos[-1863.0983,-211.96277]
::draw.vertex[54]: a_Pos[-1861.5724,-208.70963]
::draw.vertex[55]: a_Pos[-1860.0182,-205.47253]
::draw.vertex[56]: a_Pos[-1858.4359,-202.25159]
::draw.vertex[57]: a_Pos[-1856.8257,-199.047]
::draw.vertex[58]: a_Pos[-1855.1876,-195.85892]
::draw.vertex[59]: a_Pos[-1853.522,-192.68747]
::draw.vertex[60]: a_Pos[-1851.8289,-189.53284]
::draw.vertex[61]: a_Pos[-1850.1084,-186.3952]
::draw.vertex[62]: a_Pos[-1848.3608,-183.27469]
::draw.vertex[63]: a_Pos[-1846.5863,-180.17148]
::draw.vertex[64]: a_Pos[-1844.7848,-177.0857]
::draw.vertex[65]: a_Pos[-1842.9567,-174.01755]
::draw.vertex[66]: a_Pos[-1841.102,-170.96716]
::draw.vertex[67]: a_Pos[-1839.2211,-167.9347]
::draw.vertex[68]: a_Pos[-1837.314,-164.92032]
::draw.vertex[69]: a_Pos[-1835.3807,-161.9242]
::draw.vertex[70]: a_Pos[-1833.4216,-158.94647]
::draw.vertex[71]: a_Pos[-1831.4368,-155.98732]
::draw.vertex[72]: a_Pos[-1829.4264,-153.04689]
::draw.vertex[73]: a_Pos[-1827.3906,-150.12535]
::draw.vertex[74]: a_Pos[-1825.3296,-147.22284]
::draw.vertex[75]: a_Pos[-1823.2434,-144.33954]
::draw.vertex[76]: a_Pos[-1821.1323,-141.4756]
::draw.vertex[77]: a_Pos[-1818.9966,-138.63116]
::draw.vertex[78]: a_Pos[-1816.836,-135.80643]
::draw.vertex[79]: a_Pos[-1814.6512,-133.00151]
::draw.vertex[80]: a_Pos[-1812.442,-130.21661]
::draw.vertex[81]: a_Pos[-1810.2087,-127.45184]
::draw.vertex[82]: a_Pos[-1807.9515,-124.70741]
::draw.vertex[83]: a_Pos[-1805.6704,-121.983444]
::draw.vertex[84]: a_Pos[-1803.3656,-119.280106]
::draw.vertex[85]: a_Pos[-1801.0374,-116.597565]
::draw.vertex[86]: a_Pos[-1798.6858,-113.935974]
::draw.vertex[87]: a_Pos[-1796.311,-111.29549]
::draw.vertex[88]: a_Pos[-1793.9133,-108.676285]
::draw.vertex[89]: a_Pos[-1791.4927,-106.07849]
::draw.vertex[90]: a_Pos[-1789.0493,-103.50229]
::draw.vertex[91]: a_Pos[-1786.5835,-100.947845]
::draw.vertex[92]: a_Pos[-1784.0952,-98.4153]
::draw.vertex[93]: a_Pos[-1781.5847,-95.904816]
::draw.vertex[94]: a_Pos[-1779.0521,-93.41655]
::draw.vertex[95]: a_Pos[-1776.4977,-90.95068]
::draw.vertex[96]: a_Pos[-1773.9215,-88.50734]
::draw.vertex[97]: a_Pos[-1771.3237,-86.086716]
::draw.vertex[98]: a_Pos[-1768.7045,-83.688934]
::draw.vertex[99]: a_Pos[-1766.0641,-81.31418]
::draw.vertex[100]: a_Pos[-1763.4025,-78.9626]
::draw.vertex[101]: a_Pos[-1760.7198,-76.63435]
::draw.vertex[102]: a_Pos[-1758.0166,-74.329605]
::draw.vertex[103]: a_Pos[-1755.2926,-72.04852]
::draw.vertex[104]: a_Pos[-1752.5481,-69.791245]
::draw.vertex[105]: a_Pos[-1749.7834,-67.55794]
::draw.vertex[106]: a_Pos[-1746.9985,-65.34877]
::draw.vertex[107]: a_Pos[-1744.1936,-63.16388]
::draw.vertex[108]: a_Pos[-1741.3688,-61.00345]
::draw.vertex[109]: a_Pos[-1738.5244,-58.86763]
::draw.vertex[110]: a_Pos[-1735.6605,-56.756577]
::draw.vertex[111]: a_Pos[-1732.7771,-54.670456]
::draw.vertex[112]: a_Pos[-1729.8746,-52.609406]
::draw.vertex[113]: a_Pos[-1726.9531,-50.57361]
::draw.vertex[114]: a_Pos[-1724.0127,-48.563217]
::draw.vertex[115]: a_Pos[-1721.0535,-46.5784]
::draw.vertex[116]: a_Pos[-1718.0758,-44.619293]
::draw.vertex[117]: a_Pos[-1715.0797,-42.686066]
::draw.vertex[118]: a_Pos[-1712.0653,-40.778885]
::draw.vertex[119]: a_Pos[-1709.0328,-38.897903]
::draw.vertex[120]: a_Pos[-1705.9824,-37.043274]
::draw.vertex[121]: a_Pos[-1702.9143,-35.21518]
::draw.vertex[122]: a_Pos[-1699.8285,-33.413742]
::draw.vertex[123]: a_Pos[-1696.7253,-31.639145]
::draw.vertex[124]: a_Pos[-1693.6047,-29.891556]
::draw.vertex[125]: a_Pos[-1690.4672,-28.171112]
::draw.vertex[126]: a_Pos[-1687.3125,-26.477982]
::draw.vertex[127]: a_Pos[-1684.1411,-24.812325]
::draw.vertex[128]: a_Pos[-1680.953,-23.174294]
::draw.vertex[129]: a_Pos[-1677.7484,-21.564056]
::draw.vertex[130]: a_Pos[-1674.5275,-19.981773]
::draw.vertex[131]: a_Pos[-1671.2904,-18.42759]
::draw.vertex[132]: a_Pos[-1668.0372,-16.90168]
::draw.vertex[133]: a_Pos[-1664.7683,-15.404198]
::draw.vertex[134]: a_Pos[-1661.4835,-13.935295]
::draw.vertex[135]: a_Pos[-1658.1833,-12.49514]
::draw.vertex[136]: a_Pos[-1654.8677,-11.083885]
::draw.vertex[137]: a_Pos[-1651.5369,-9.701698]
::draw.vertex[138]: a_Pos[-1648.1909,-8.348732]
::draw.vertex[139]: a_Pos[-1644.8302,-7.0251465]
::draw.vertex[140]: a_Pos[-1641.4546,-5.731102]
::draw.vertex[141]: a_Pos[-1638.0645,-4.4667587]
::draw.vertex[142]: a_Pos[-1634.6599,-3.2322693]
::draw.vertex[143]: a_Pos[-1631.241,-2.027794]
::draw.vertex[144]: a_Pos[-1627.808,-0.85350037]
::draw.vertex[145]: a_Pos[-1624.3611,0.29045868]
::draw.vertex[146]: a_Pos[-1620.9004,1.4039307]
::draw.vertex[147]: a_Pos[-1617.426,2.48674]
::draw.vertex[148]: a_Pos[-1613.9382,3.538742]
::draw.vertex[149]: a_Pos[-1610.4371,4.5597687]
::draw.vertex[150]: a_Pos[-1606.9229,5.5496674]
::draw.vertex[151]: a_Pos[-1603.3955,6.508278]
::draw.vertex[152]: a_Pos[-1599.8555,7.43544]
::draw.vertex[153]: a_Pos[-1596.3026,8.330994]
::draw.vertex[154]: a_Pos[-1592.7373,9.194778]
::draw.vertex[155]: a_Pos[-1589.1595,10.026634]
::draw.vertex[156]: a_Pos[-1585.5697,10.826408]
::draw.vertex[157]: a_Pos[-1581.9678,11.593941]
::draw.vertex[158]: a_Pos[-1578.3539,12.329071]
::draw.vertex[159]: a_Pos[-1574.7284,13.031639]
::draw.vertex[160]: a_Pos[-1571.0913,13.701485]
::draw.vertex[161]: a_Pos[-1567.4427,14.338448]
::draw.vertex[162]: a_Pos[-1563.783,14.942375]
::draw.vertex[163]: a_Pos[-1560.112,15.5131]
::draw.vertex[164]: a_Pos[-1556.4303,16.050476]
::draw.vertex[165]: a_Pos[-1552.7378,16.554329]
::draw.vertex[166]: a_Pos[-1549.0345,17.024506]
::draw.vertex[167]: a_Pos[-1545.3209,17.460854]
::draw.vertex[168]: a_Pos[-1541.597,17.863205]
::draw.vertex[169]: a_Pos[-1537.863,18.2314]
::draw.vertex[170]: a_Pos[-1534.119,18.565285]
::draw.vertex[171]: a_Pos[-1530.3651,18.8647]
::draw.vertex[172]: a_Pos[-1526.6016,19.129486]
::draw.vertex[173]: a_Pos[-1522.8286,19.35949]
::draw.vertex[174]: a_Pos[-1519.0463,19.554535]
::draw.vertex[175]: a_Pos[-1515.2548,19.714478]
::draw.vertex[176]: a_Pos[-1511.4542,19.839157]
::draw.vertex[177]: a_Pos[-1507.6448,19.928406]
::draw.vertex[178]: a_Pos[-1503.8267,19.982079]
::draw.vertex[179]: a_Pos[-1496.1733,19.982079]
::draw.vertex[180]: a_Pos[-1492.3552,19.928406]
::draw.vertex[181]: a_Pos[-1488.5458,19.839157]
::draw.vertex[182]: a_Pos[-1484.7452,19.714478]
::draw.vertex[183]: a_Pos[-1480.9537,19.554535]
::draw.vertex[184]: a_Pos[-1477.1714,19.35949]
::draw.vertex[185]: a_Pos[-1473.3984,19.129486]
::draw.vertex[186]: a_Pos[-1469.6349,18.8647]
::draw.vertex[187]: a_Pos[-1465.881,18.565285]
::draw.vertex[188]: a_Pos[-1462.137,18.2314]
::draw.vertex[189]: a_Pos[-1458.403,17.863205]
::draw.vertex[190]: a_Pos[-1454.6791,17.460854]
::draw.vertex[191]: a_Pos[-1450.9655,17.024506]
::draw.vertex[192]: a_Pos[-1447.2622,16.554329]
::draw.vertex[193]: a_Pos[-1443.5697,16.050476]
::draw.vertex[194]: a_Pos[-1439.888,15.5131]
::draw.vertex[195]: a_Pos[-1436.217,14.942375]
::draw.vertex[196]: a_Pos[-1432.5573,14.338448]
::draw.vertex[197]: a_Pos[-1428.9087,13.701485]
::draw.vertex[198]: a_Pos[-1425.2716,13.031639]
::draw.vertex[199]: a_Pos[-1421.6461,12.329071]
::draw.vertex[200]: a_Pos[-1418.0322,11.593941]
::draw.vertex[201]: a_Pos[-1414.4303,10.826408]
::draw.vertex[202]: a_Pos[-1410.8405,10.026634]
::draw.vertex[203]: a_Pos[-1407.2627,9.194778]
::draw.vertex[204]: a_Pos[-1403.6974,8.330994]
::draw.vertex[205]: a_Pos[-1400.1445,7.43544]
::draw.vertex[206]: a_Pos[-1396.6045,6.508278]
::draw.vertex[207]: a_Pos[-1393.0771,5.5496674]
::draw.vertex[208]: a_Pos[-1389.5629,4.5597687]
::draw.vertex[209]: a_Pos[-1386.0618,3.538742]
::draw.vertex[210]: a_Pos[-1382.574,2.48674]
::draw.vertex[211]: a_Pos[-1379.0996,1.4039307]
::draw.vertex[212]: a_Pos[-1375.6389,0.29045868]
::draw.vertex[213]: a_Pos[-1372.192,-0.85350037]
::draw.vertex[214]: a_Pos[-1368.759,-2.027794]
::draw.vertex[215]: a_Pos[-1365.3401,-3.2322693]
::draw.vertex[216]: a_Pos[-1361.9355,-4.4667587]
::draw.vertex[217]: a_Pos[-1358.5454,-5.731102]
::draw.vertex[218]: a_Pos[-1355.1698,-7.0251465]
::draw.vertex[219]: a_Pos[-1351.8091,-8.348732]
::draw.vertex[220]: a_Pos[-1348.4631,-9.701698]
::draw.vertex[221]: a_Pos[-1345.1323,-11.083885]
::draw.vertex[222]: a_Pos[-1341.8167,-12.49514]
::draw.vertex[223]: a_Pos[-1338.5165,-13.935295]
::draw.vertex[224]: a_Pos[-1335.2317,-15.404198]
::draw.vertex[225]: a_Pos[-1331.9628,-16.90168]
::draw.vertex[226]: a_Pos[-1328.7096,-18.42759]
::draw.vertex[227]: a_Pos[-1325.4725,-19.981773]
::draw.vertex[228]: a_Pos[-1322.2516,-21.564056]
::draw.vertex[229]: a_Pos[-1319.047,-23.174294]
::draw.vertex[230]: a_Pos[-1315.8589,-24.812325]
::draw.vertex[231]: a_Pos[-1312.6875,-26.477982]
::draw.vertex[232]: a_Pos[-1309.5328,-28.171112]
::draw.vertex[233]: a_Pos[-1306.3953,-29.891556]
::draw.vertex[234]: a_Pos[-1303.2747,-31.639145]
::draw.vertex[235]: a_Pos[-1300.1715,-33.413742]
::draw.vertex[236]: a_Pos[-1297.0857,-35.21518]
::draw.vertex[237]: a_Pos[-1294.0176,-37.043274]
::draw.vertex[238]: a_Pos[-1290.9672,-38.897903]
::draw.vertex[239]: a_Pos[-1287.9347,-40.778885]
::draw.vertex[240]: a_Pos[-1284.9203,-42.686066]
::draw.vertex[241]: a_Pos[-1281.9242,-44.619293]
::draw.vertex[242]: a_Pos[-1278.9465,-46.5784]
::draw.vertex[243]: a_Pos[-1275.9873,-48.563217]
::draw.vertex[244]: a_Pos[-1273.0469,-50.57361]
::draw.vertex[245]: a_Pos[-1270.1254,-52.609406]
::draw.vertex[246]: a_Pos[-1267.2229,-54.670456]
::draw.vertex[247]: a_Pos[-1264.3395,-56.756577]
::draw.vertex[248]: a_Pos[-1261.4756,-58.86763]
::draw.vertex[249]: a_Pos[-1258.6312,-61.00345]
::draw.vertex[250]: a_Pos[-1255.8064,-63.16388]
::draw.vertex[251]: a_Pos[-1253.0015,-65.34877]
::draw.vertex[252]: a_Pos[-1250.2166,-67.55794]
::draw.vertex[253]: a_Pos[-1247.4519,-69.791245]
::draw.vertex[254]: a_Pos[-1244.7074,-72.04852]
::draw.vertex[255]: a_Pos[-1241.9834,-74.329605]
::draw.vertex[256]: a_Pos[-1239.2802,-76.63435]
::draw.vertex[257]: a_Pos[-1236.5975,-78.9626]
::draw.vertex[258]: a_Pos[-1233.9359,-81.31418]
::draw.vertex[259]: a_Pos[-1231.2955,-83.688934]
::draw.vertex[260]: a_Pos[-1228.6763,-86.086716]
::draw.vertex[261]: a_Pos[-1226.0785,-88.50734]
::draw.vertex[262]: a_Pos[-1223.5023,-90.95068]
::draw.vertex[263]: a_Pos[-1220.9479,-93.41655]
::draw.vertex[264]: a_Pos[-1218.4153,-95.904816]
::draw.vertex[265]: a_Pos[-1215.9048,-98.4153]
::draw.vertex[266]: a_Pos[-1213.4165,-100.947845]
::draw.vertex[267]: a_Pos[-1210.9507,-103.50229]
::draw.vertex[268]: a_Pos[-1208.5073,-106.07849]
::draw.vertex[269]: a_Pos[-1206.0867,-108.676285]
::draw.vertex[270]: a_Pos[-1203.689,-111.29549]
::draw.vertex[271]: a_Pos[-1201.3142,-113.935974]
::draw.vertex[272]: a_Pos[-1198.9626,-116.597565]
::draw.vertex[273]: a_Pos[-1196.6344,-119.280106]
::draw.vertex[274]: a_Pos[-1194.3296,-121.983444]
::draw.vertex[275]: a_Pos[-1192.0485,-124.70741]
::draw.vertex[276]: a_Pos[-1189.7913,-127.45184]
::draw.vertex[277]: a_Pos[-1187.558,-130.21661]
::draw.vertex[278]: a_Pos[-1185.3488,-133.00151]
::draw.vertex[279]: a_Pos[-1183.164,-135.80643]
::draw.vertex[280]: a_Pos[-1181.0034,-138.63116]
::draw.vertex[281]: a_Pos[-1178.8677,-141.4756]
::draw.vertex[282]: a_Pos[-1176.7566,-144.33954]
::draw.vertex[283]: a_Pos[-1174.6704,-147.22284]
::draw.vertex[284]: a_Pos[-1172.6094,-150.12535]
::draw.vertex[285]: a_Pos[-1170.5736,-153.04689]
::draw.vertex[286]: a_Pos[-1168.5632,-155.98732]
::draw.vertex[287]: a_Pos[-1166.5784,-158.94647]
::draw.vertex[288]: a_Pos[-1164.6193,-161.9242]
::draw.vertex[289]: a_Pos[-1162.686,-164.92032]
::draw.vertex[290]: a_Pos[-1160.7789,-167.9347]
::draw.vertex[291]: a_Pos[-1158.898,-170.96716]
::draw.vertex[292]: a_Pos[-1157.0433,-174.01755]
::draw.vertex[293]: a_Pos[-1155.2152,-177.0857]
::draw.vertex[294]: a_Pos[-1153.4137,-180.17148]
::draw.vertex[295]: a_Pos[-1151.6392,-183.27469]
::draw.vertex[296]: a_Pos[-1149.8916,-186.3952]
::draw.vertex[297]: a_Pos[-1148.1711,-189.53284]
::draw.vertex[298]: a_Pos[-1146.478,-192.68747]
::draw.vertex[299]: a_Pos[-1144.8124,-195.85892]
::draw.vertex[300]: a_Pos[-1143.1743,-199.047]
::draw.vertex[301]: a_Pos[-1141.5641,-202.25159]
::draw.vertex[302]: a_Pos[-1139.9818,-205.47253]
::draw.vertex[303]: a_Pos[-1138.4276,-208.70963]
::draw.vertex[304]: a_Pos[-1136.9017,-211.96277]
::draw.vertex[305]: a_Pos[-1135.4042,-215.23175]
::draw.vertex[306]: a_Pos[-1133.9353,-218.51645]
::draw.vertex[307]: a_Pos[-1132.4951,-221.81668]
::draw.vertex[308]: a_Pos[-1131.0839,-225.1323]
::draw.vertex[309]: a_Pos[-1129.7017,-228.46313]
::draw.vertex[310]: a_Pos[-1128.3488,-231.80905]
::draw.vertex[311]: a_Pos[-1127.0251,-235.16986]
::draw.vertex[312]: a_Pos[-1125.7311,-238.54541]
::draw.vertex[313]: a_Pos[-1124.4668,-241.93558]
::draw.vertex[314]: a_Pos[-1123.2323,-245.34015]
::draw.vertex[315]: a_Pos[-1122.0278,-248.759]
::draw.vertex[316]: a_Pos[-1120.8535,-252.19196]
::draw.vertex[317]: a_Pos[-1119.7096,-255.63889]
::draw.vertex[318]: a_Pos[-1118.5961,-259.09958]
::draw.vertex[319]: a_Pos[-1117.5133,-262.5739]
::draw.vertex[320]: a_Pos[-1116.4613,-266.06174]
::draw.vertex[321]: a_Pos[-1115.4402,-269.56287]
::draw.vertex[322]: a_Pos[-1114.4503,-273.07718]
::draw.vertex[323]: a_Pos[-1113.4917,-276.60446]
::draw.vertex[324]: a_Pos[-1112.5646,-280.1446]
::draw.vertex[325]: a_Pos[-1111.6691,-283.6974]
::draw.vertex[326]: a_Pos[-1110.8052,-287.26273]
::draw.vertex[327]: a_Pos[-1109.9734,-290.84042]
::draw.vertex[328]: a_Pos[-1109.1736,-294.4303]
::draw.vertex[329]: a_Pos[-1108.406,-298.03226]
::draw.vertex[330]: a_Pos[-1107.6709,-301.64606]
::draw.vertex[331]: a_Pos[-1106.9684,-305.2716]
::draw.vertex[332]: a_Pos[-1106.2985,-308.90872]
::draw.vertex[333]: a_Pos[-1105.6615,-312.55725]
::draw.vertex[334]: a_Pos[-1105.0576,-316.217]
::draw.vertex[335]: a_Pos[-1104.4869,-319.88788]
::draw.vertex[336]: a_Pos[-1103.9496,-323.56967]
::draw.vertex[337]: a_Pos[-1103.4457,-327.26224]
::draw.vertex[338]: a_Pos[-1102.9755,-330.96542]
::draw.vertex[339]: a_Pos[-1102.5392,-334.67905]
::draw.vertex[340]: a_Pos[-1102.1368,-338.40295]
::draw.vertex[341]: a_Pos[-1101.7686,-342.13702]
::draw.vertex[342]: a_Pos[-1101.4347,-345.88104]
::draw.vertex[343]: a_Pos[-1101.1353,-349.6349]
::draw.vertex[344]: a_Pos[-1100.8705,-353.3984]
::draw.vertex[345]: a_Pos[-1100.6405,-357.17142]
::draw.vertex[346]: a_Pos[-1100.4454,-360.95374]
::draw.vertex[347]: a_Pos[-1100.2855,-364.74527]
::draw.vertex[348]: a_Pos[-1100.1609,-368.5458]
::draw.vertex[349]: a_Pos[-1100.0715,-372.35522]
::draw.vertex[350]: a_Pos[-1100.018,-376.17334]
::draw.vertex[351]: a_Pos[-1100.018,-383.82666]
::draw.vertex[352]: a_Pos[-1100.0715,-387.64478]
::draw.vertex[353]: a_Pos[-1100.1609,-391.4542]
::draw.vertex[354]: a_Pos[-1100.2855,-395.25473]
::draw.vertex[355]: a_Pos[-1100.4454,-399.04626]
::draw.vertex[356]: a_Pos[-1100.6405,-402.82858]
::draw.vertex[357]: a_Pos[-1100.8705,-406.6016]
::draw.vertex[358]: a_Pos[-1101.1353,-410.3651]
::draw.vertex[359]: a_Pos[-1101.4347,-414.11896]
::draw.vertex[360]: a_Pos[-1101.7686,-417.86298]
::draw.vertex[361]: a_Pos[-1102.1368,-421.59705]
::draw.vertex[362]: a_Pos[-1102.5392,-425.32098]
::draw.vertex[363]: a_Pos[-1102.9755,-429.0346]
::draw.vertex[364]: a_Pos[-1103.4457,-432.7378]
::draw.vertex[365]: a_Pos[-1103.9496,-436.4303]
::draw.vertex[366]: a_Pos[-1104.4869,-440.11212]
::draw.vertex[367]: a_Pos[-1105.0576,-443.78296]
::draw.vertex[368]: a_Pos[-1105.6615,-447.44275]
::draw.vertex[369]: a_Pos[-1106.2985,-451.09125]
::draw.vertex[370]: a_Pos[-1106.9684,-454.7284]
::draw.vertex[371]: a_Pos[-1107.6709,-458.35394]
::draw.vertex[372]: a_Pos[-1108.406,-461.96777]
::draw.vertex[373]: a_Pos[-1109.1736,-465.5697]
::draw.vertex[374]: a_Pos[-1109.9734,-469.1596]
::draw.vertex[375]: a_Pos[-1110.8052,-472.73724]
::draw.vertex[376]: a_Pos[-1111.6691,-476.3026]
::draw.vertex[377]: a_Pos[-1112.5646,-479.8554]
::draw.vertex[378]: a_Pos[-1113.4917,-483.39557]
::draw.vertex[379]: a_Pos[-1114.4503,-486.92285]
::draw.vertex[380]: a_Pos[-1115.4402,-490.43713]
::draw.vertex[381]: a_Pos[-1116.4613,-493.93823]
::draw.vertex[382]: a_Pos[-1117.5133,-497.4261]
::draw.vertex[383]: a_Pos[-1118.5961,-500.9004]
::draw.vertex[384]: a_Pos[-1119.7096,-504.36115]
::draw.vertex[385]: a_Pos[-1120.8535,-507.80804]
::draw.vertex[386]: a_Pos[-1122.0278,-511.24103]
::draw.vertex[387]: a_Pos[-1123.2323,-514.65985]
::draw.vertex[388]: a_Pos[-1124.4668,-518.06445]
::draw.vertex[389]: a_Pos[-1125.7311,-521.4546]
::draw.vertex[390]: a_Pos[-1127.0251,-524.83014]
::draw.vertex[391]: a_Pos[-1128.3488,-528.191]
::draw.vertex[392]: a_Pos[-1129.7017,-531.53687]
::draw.vertex[393]: a_Pos[-1131.0839,-534.86774]
::draw.vertex[394]: a_Pos[-1132.4951,-538.18335]
::draw.vertex[395]: a_Pos[-1133.9353,-541.4836]
::draw.vertex[396]: a_Pos[-1135.4042,-544.76825]
::draw.vertex[397]: a_Pos[-1136.9017,-548.03723]
::draw.vertex[398]: a_Pos[-1138.4276,-551.29034]
::draw.vertex[399]: a_Pos[-1139.9818,-554.52747]
::draw.vertex[400]: a_Pos[-1141.5641,-557.7484]
::draw.vertex[401]: a_Pos[-1143.1743,-560.953]
::draw.vertex[402]: a_Pos[-1144.8124,-564.1411]
::draw.vertex[403]: a_Pos[-1146.478,-567.3125]
::draw.vertex[404]: a_Pos[-1148.1711,-570.46716]
::draw.vertex[405]: a_Pos[-1149.8916,-573.6048]
::draw.vertex[406]: a_Pos[-1151.6392,-576.7253]
::draw.vertex[407]: a_Pos[-1153.4137,-579.82855]
::draw.vertex[408]: a_Pos[-1155.2152,-582.9143]
::draw.vertex[409]: a_Pos[-1157.0433,-585.9825]
::draw.vertex[410]: a_Pos[-1158.898,-589.03284]
::draw.vertex[411]: a_Pos[-1160.7789,-592.0653]
::draw.vertex[412]: a_Pos[-1162.686,-595.07965]
::draw.vertex[413]: a_Pos[-1164.6193,-598.0758]
::draw.vertex[414]: a_Pos[-1166.5784,-601.0535]
::draw.vertex[415]: a_Pos[-1168.5632,-604.0127]
::draw.vertex[416]: a_Pos[-1170.5736,-606.9531]
::draw.vertex[417]: a_Pos[-1172.6094,-609.87463]
::draw.vertex[418]: a_Pos[-1174.6704,-612.77716]
::draw.vertex[419]: a_Pos[-1176.7566,-615.66046]
::draw.vertex[420]: a_Pos[-1178.8677,-618.5244]
::draw.vertex[421]: a_Pos[-1181.0034,-621.36884]
::draw.vertex[422]: a_Pos[-1183.164,-624.1936]
::draw.vertex[423]: a_Pos[-1185.3488,-626.9985]
::draw.vertex[424]: a_Pos[-1187.558,-629.7834]
::draw.vertex[425]: a_Pos[-1189.7913,-632.54816]
::draw.vertex[426]: a_Pos[-1192.0485,-635.2926]
::draw.vertex[427]: a_Pos[-1194.3296,-638.01654]
::draw.vertex[428]: a_Pos[-1196.6344,-640.7199]
::draw.vertex[429]: a_Pos[-1198.9626,-643.4024]
::draw.vertex[430]: a_Pos[-1201.3142,-646.064]
::draw.vertex[431]: a_Pos[-1203.689,-648.7045]
::draw.vertex[432]: a_Pos[-1206.0867,-651.3237]
::draw.vertex[433]: a_Pos[-1208.5073,-653.9215]
::draw.vertex[434]: a_Pos[-1210.9507,-656.4977]
::draw.vertex[435]: a_Pos[-1213.4165,-659.0522]
::draw.vertex[436]: a_Pos[-1215.9048,-661.5847]
::draw.vertex[437]: a_Pos[-1218.4153,-664.0952]
::draw.vertex[438]: a_Pos[-1220.9479,-666.58344]
::draw.vertex[439]: a_Pos[-1223.5023,-669.0493]
::draw.vertex[440]: a_Pos[-1226.0785,-671.4927]
::draw.vertex[441]: a_Pos[-1228.6763,-673.91327]
::draw.vertex[442]: a_Pos[-1231.2955,-676.3111]
::draw.vertex[443]: a_Pos[-1233.9359,-678.68585]
::draw.vertex[444]: a_Pos[-1236.5975,-681.0374]
::draw.vertex[445]: a_Pos[-1239.2802,-683.36566]
::draw.vertex[446]: a_Pos[-1241.9834,-685.6704]
::draw.vertex[447]: a_Pos[-1244.7074,-687.9515]
::draw.vertex[448]: a_Pos[-1247.4519,-690.20874]
::draw.vertex[449]: a_Pos[-1250.2166,-692.4421]
::draw.vertex[450]: a_Pos[-1253.0015,-694.65125]
::draw.vertex[451]: a_Pos[-1255.8064,-696.8361]
::draw.vertex[452]: a_Pos[-1258.6312,-698.9965]
::draw.vertex[453]: a_Pos[-1261.4756,-701.1324]
::draw.vertex[454]: a_Pos[-1264.3395,-703.2434]
::draw.vertex[455]: a_Pos[-1267.2229,-705.3295]
::draw.vertex[456]: a_Pos[-1270.1254,-707.39056]
::draw.vertex[457]: a_Pos[-1273.0469,-709.4264]
::draw.vertex[458]: a_Pos[-1275.9873,-711.43677]
::draw.vertex[459]: a_Pos[-1278.9465,-713.42163]
::draw.vertex[460]: a_Pos[-1281.9242,-715.38074]
::draw.vertex[461]: a_Pos[-1284.9203,-717.3139]
::draw.vertex[462]: a_Pos[-1287.9347,-719.2211]
::draw.vertex[463]: a_Pos[-1290.9672,-721.1021]
::draw.vertex[464]: a_Pos[-1294.0176,-722.9567]
::draw.vertex[465]: a_Pos[-1297.0857,-724.78485]
::draw.vertex[466]: a_Pos[-1300.1715,-726.58624]
::draw.vertex[467]: a_Pos[-1303.2747,-728.36084]
::draw.vertex[468]: a_Pos[-1306.3953,-730.10846]
::draw.vertex[469]: a_Pos[-1309.5328,-731.8289]
::draw.vertex[470]: a_Pos[-1312.6875,-733.52203]
::draw.vertex[471]: a_Pos[-1315.8589,-735.1877]
::draw.vertex[472]: a_Pos[-1319.047,-736.8257]
::draw.vertex[473]: a_Pos[-1322.2516,-738.4359]
::draw.vertex[474]: a_Pos[-1325.4725,-740.01825]
::draw.vertex[475]: a_Pos[-1328.7096,-741.5724]
::draw.vertex[476]: a_Pos[-1331.9628,-743.0983]
::draw.vertex[477]: a_Pos[-1335.2317,-744.5958]
::draw.vertex[478]: a_Pos[-1338.5165,-746.0647]
::draw.vertex[479]: a_Pos[-1341.8167,-747.5049]
::draw.vertex[480]: a_Pos[-1345.1323,-748.91614]
::draw.vertex[481]: a_Pos[-1348.4631,-750.2983]
::draw.vertex[482]: a_Pos[-1351.8091,-751.65125]
::draw.vertex[483]: a_Pos[-1355.1698,-752.97485]
::draw.vertex[484]: a_Pos[-1358.5454,-754.2689]
::draw.vertex[485]: a_Pos[-1361.9355,-755.53326]
::draw.vertex[486]: a_Pos[-1365.3401,-756.76776]
::draw.vertex[487]: a_Pos[-1368.759,-757.9722]
::draw.vertex[488]: a_Pos[-1372.192,-759.1465]
::draw.vertex[489]: a_Pos[-1375.6389,-760.29047]
::draw.vertex[490]: a_Pos[-1379.0996,-761.40393]
::draw.vertex[491]: a_Pos[-1382.574,-762.48676]
::draw.vertex[492]: a_Pos[-1386.0618,-763.53876]
::draw.vertex[493]: a_Pos[-1389.5629,-764.55975]
::draw.vertex[494]: a_Pos[-1393.0771,-765.5497]
::draw.vertex[495]: a_Pos[-1396.6045,-766.5083]
::draw.vertex[496]: a_Pos[-1400.1445,-767.4354]
::draw.vertex[497]: a_Pos[-1403.6974,-768.331]
::draw.vertex[498]: a_Pos[-1407.2627,-769.19476]
::draw.vertex[499]: a_Pos[-1410.8405,-770.0266]
::draw.vertex[500]: a_Pos[-1414.4303,-770.8264]
::draw.vertex[501]: a_Pos[-1418.0322,-771.59393]
::draw.vertex[502]: a_Pos[-1421.6461,-772.3291]
::draw.vertex[503]: a_Pos[-1425.2716,-773.0316]
::draw.vertex[504]: a_Pos[-1428.9087,-773.7015]
::draw.vertex[505]: a_Pos[-1432.5573,-774.33844]
::draw.vertex[506]: a_Pos[-1436.217,-774.9424]
::draw.vertex[507]: a_Pos[-1439.888,-775.5131]
::draw.vertex[508]: a_Pos[-1443.5697,-776.0505]
::draw.vertex[509]: a_Pos[-1447.2622,-776.5543]
::draw.vertex[510]: a_Pos[-1450.9655,-777.02454]
::draw.vertex[511]: a_Pos[-1454.6791,-777.4609]
::draw.vertex[512]: a_Pos[-1458.403,-777.8632]
::draw.vertex[513]: a_Pos[-1462.137,-778.2314]
::draw.vertex[514]: a_Pos[-1465.881,-778.5653]
::draw.vertex[515]: a_Pos[-1469.6349,-778.8647]
::draw.vertex[516]: a_Pos[-1473.3984,-779.1295]
::draw.vertex[517]: a_Pos[-1477.1714,-779.3595]
::draw.vertex[518]: a_Pos[-1480.9537,-779.55457]
::draw.vertex[519]: a_Pos[-1484.7452,-779.7145]
::draw.vertex[520]: a_Pos[-1488.5458,-779.8392]
::draw.vertex[521]: a_Pos[-1492.3552,-779.9284]
::draw.vertex[522]: a_Pos[-1496.1733,-779.98206]
::draw.vertex[523]: a_Pos[-1503.8267,-779.98206]
::draw.vertex[524]: a_Pos[-1507.6448,-779.9284]
::draw.vertex[525]: a_Pos[-1511.4542,-779.8392]
::draw.vertex[526]: a_Pos[-1515.2548,-779.7145]
::draw.vertex[527]: a_Pos[-1519.0463,-779.55457]
::draw.vertex[528]: a_Pos[-1522.8286,-779.3595]
::draw.vertex[529]: a_Pos[-1526.6016,-779.1295]
::draw.vertex[530]: a_Pos[-1530.3651,-778.8647]
::draw.vertex[531]: a_Pos[-1534.119,-778.5653]
::draw.vertex[532]: a_Pos[-1537.863,-778.2314]
::draw.vertex[533]: a_Pos[-1541.597,-777.8632]
::draw.vertex[534]: a_Pos[-1545.3209,-777.4609]
::draw.vertex[535]: a_Pos[-1549.0345,-777.02454]
::draw.vertex[536]: a_Pos[-1552.7378,-776.5543]
::draw.vertex[537]: a_Pos[-1556.4303,-776.0505]
::draw.vertex[538]: a_Pos[-1560.112,-775.5131]
::draw.vertex[539]: a_Pos[-1563.783,-774.9424]
::draw.vertex[540]: a_Pos[-1567.4427,-774.33844]
::draw.vertex[541]: a_Pos[-1571.0913,-773.7015]
::draw.vertex[542]: a_Pos[-1574.7284,-773.0316]
::draw.vertex[543]: a_Pos[-1578.3539,-772.3291]
::draw.vertex[544]: a_Pos[-1581.9678,-771.59393]
::draw.vertex[545]: a_Pos[-1585.5697,-770.8264]
::draw.vertex[546]: a_Pos[-1589.1595,-770.0266]
::draw.vertex[547]: a_Pos[-1592.7373,-769.19476]
::draw.vertex[548]: a_Pos[-1596.3026,-768.331]
::draw.vertex[549]: a_Pos[-1599.8555,-767.4354]
::draw.vertex[550]: a_Pos[-1603.3955,-766.5083]
::draw.vertex[551]: a_Pos[-1606.9229,-765.5497]
::draw.vertex[552]: a_Pos[-1610.4371,-764.55975]
::draw.vertex[553]: a_Pos[-1613.9382,-763.53876]
::draw.vertex[554]: a_Pos[-1617.426,-762.48676]
::draw.vertex[555]: a_Pos[-1620.9004,-761.40393]
::draw.vertex[556]: a_Pos[-1624.3611,-760.29047]
::draw.vertex[557]: a_Pos[-1627.808,-759.1465]
::draw.vertex[558]: a_Pos[-1631.241,-757.9722]
::draw.vertex[559]: a_Pos[-1634.6599,-756.76776]
::draw.vertex[560]: a_Pos[-1638.0645,-755.53326]
::draw.vertex[561]: a_Pos[-1641.4546,-754.2689]
::draw.vertex[562]: a_Pos[-1644.8302,-752.97485]
::draw.vertex[563]: a_Pos[-1648.1909,-751.65125]
::draw.vertex[564]: a_Pos[-1651.5369,-750.2983]
::draw.vertex[565]: a_Pos[-1654.8677,-748.91614]
::draw.vertex[566]: a_Pos[-1658.1833,-747.5049]
::draw.vertex[567]: a_Pos[-1661.4835,-746.0647]
::draw.vertex[568]: a_Pos[-1664.7683,-744.5958]
::draw.vertex[569]: a_Pos[-1668.0372,-743.0983]
::draw.vertex[570]: a_Pos[-1671.2904,-741.5724]
::draw.vertex[571]: a_Pos[-1674.5275,-740.01825]
::draw.vertex[572]: a_Pos[-1677.7484,-738.4359]
::draw.vertex[573]: a_Pos[-1680.953,-736.8257]
::draw.vertex[574]: a_Pos[-1684.1411,-735.1877]
::draw.vertex[575]: a_Pos[-1687.3125,-733.52203]
::draw.vertex[576]: a_Pos[-1690.4672,-731.8289]
::draw.vertex[577]: a_Pos[-1693.6047,-730.10846]
::draw.vertex[578]: a_Pos[-1696.7253,-728.36084]
::draw.vertex[579]: a_Pos[-1699.8285,-726.58624]
::draw.vertex[580]: a_Pos[-1702.9143,-724.78485]
::draw.vertex[581]: a_Pos[-1705.9824,-722.9567]
::draw.vertex[582]: a_Pos[-1709.0328,-721.1021]
::draw.vertex[583]: a_Pos[-1712.0653,-719.2211]
::draw.vertex[584]: a_Pos[-1715.0797,-717.3139]
::draw.vertex[585]: a_Pos[-1718.0758,-715.38074]
::draw.vertex[586]: a_Pos[-1721.0535,-713.42163]
::draw.vertex[587]: a_Pos[-1724.0127,-711.43677]
::draw.vertex[588]: a_Pos[-1726.9531,-709.4264]
::draw.vertex[589]: a_Pos[-1729.8746,-707.39056]
::draw.vertex[590]: a_Pos[-1732.7771,-705.3295]
::draw.vertex[591]: a_Pos[-1735.6605,-703.2434]
::draw.vertex[592]: a_Pos[-1738.5244,-701.1324]
::draw.vertex[593]: a_Pos[-1741.3688,-698.9965]
::draw.vertex[594]: a_Pos[-1744.1936,-696.8361]
::draw.vertex[595]: a_Pos[-1746.9985,-694.65125]
::draw.vertex[596]: a_Pos[-1749.7834,-692.4421]
::draw.vertex[597]: a_Pos[-1752.5481,-690.20874]
::draw.vertex[598]: a_Pos[-1755.2926,-687.9515]
::draw.vertex[599]: a_Pos[-1758.0166,-685.6704]
::draw.vertex[600]: a_Pos[-1760.7198,-683.36566]
::draw.vertex[601]: a_Pos[-1763.4025,-681.0374]
::draw.vertex[602]: a_Pos[-1766.0641,-678.68585]
::draw.vertex[603]: a_Pos[-1768.7045,-676.3111]
::draw.vertex[604]: a_Pos[-1771.3237,-673.91327]
::draw.vertex[605]: a_Pos[-1773.9215,-671.4927]
::draw.vertex[606]: a_Pos[-1776.4977,-669.0493]
::draw.vertex[607]: a_Pos[-1779.0521,-666.58344]
::draw.vertex[608]: a_Pos[-1781.5847,-664.0952]
::draw.vertex[609]: a_Pos[-1784.0952,-661.5847]
::draw.vertex[610]: a_Pos[-1786.5835,-659.0522]
::draw.vertex[611]: a_Pos[-1789.0493,-656.4977]
::draw.vertex[612]: a_Pos[-1791.4927,-653.9215]
::draw.vertex[613]: a_Pos[-1793.9133,-651.3237]
::draw.vertex[614]: a_Pos[-1796.311,-648.7045]
::draw.vertex[615]: a_Pos[-1798.6858,-646.064]
::draw.vertex[616]: a_Pos[-1801.0374,-643.4024]
::draw.vertex[617]: a_Pos[-1803.3656,-640.7199]
::draw.vertex[618]: a_Pos[-1805.6704,-638.01654]
::draw.vertex[619]: a_Pos[-1807.9515,-635.2926]
::draw.vertex[620]: a_Pos[-1810.2087,-632.54816]
::draw.vertex[621]: a_Pos[-1812.442,-629.7834]
::draw.vertex[622]: a_Pos[-1814.6512,-626.9985]
::draw.vertex[623]: a_Pos[-1816.836,-624.1936]
::draw.vertex[624]: a_Pos[-1818.9966,-621.36884]
::draw.vertex[625]: a_Pos[-1821.1323,-618.5244]
::draw.vertex[626]: a_Pos[-1823.2434,-615.66046]
::draw.vertex[627]: a_Pos[-1825.3296,-612.77716]
::draw.vertex[628]: a_Pos[-1827.3906,-609.87463]
::draw.vertex[629]: a_Pos[-1829.4264,-606.9531]
::draw.vertex[630]: a_Pos[-1831.4368,-604.0127]
::draw.vertex[631]: a_Pos[-1833.4216,-601.0535]
::draw.vertex[632]: a_Pos[-1835.3807,-598.0758]
::draw.vertex[633]: a_Pos[-1837.314,-595.07965]
::draw.vertex[634]: a_Pos[-1839.2211,-592.0653]
::draw.vertex[635]: a_Pos[-1841.102,-589.03284]
::draw.vertex[636]: a_Pos[-1842.9567,-585.9825]
::draw.vertex[637]: a_Pos[-1844.7848,-582.9143]
::draw.vertex[638]: a_Pos[-1846.5863,-579.82855]
::draw.vertex[639]: a_Pos[-1848.3608,-576.7253]
::draw.vertex[640]: a_Pos[-1850.1084,-573.6048]
::draw.vertex[641]: a_Pos[-1851.8289,-570.46716]
::draw.vertex[642]: a_Pos[-1853.522,-567.3125]
::draw.vertex[643]: a_Pos[-1855.1876,-564.1411]
::draw.vertex[644]: a_Pos[-1856.8257,-560.953]
::draw.vertex[645]: a_Pos[-1858.4359,-557.7484]
::draw.vertex[646]: a_Pos[-1860.0182,-554.52747]
::draw.vertex[647]: a_Pos[-1861.5724,-551.29034]
::draw.vertex[648]: a_Pos[-1863.0983,-548.03723]
::draw.vertex[649]: a_Pos[-1864.5958,-544.76825]
::draw.vertex[650]: a_Pos[-1866.0647,-541.4836]
::draw.vertex[651]: a_Pos[-1867.5049,-538.18335]
::draw.vertex[652]: a_Pos[-1868.9161,-534.86774]
::draw.vertex[653]: a_Pos[-1870.2983,-531.53687]
::draw.vertex[654]: a_Pos[-1871.6512,-528.191]
::draw.vertex[655]: a_Pos[-1872.9749,-524.83014]
::draw.vertex[656]: a_Pos[-1874.2689,-521.4546]
::draw.vertex[657]: a_Pos[-1875.5332,-518.06445]
::draw.vertex[658]: a_Pos[-1876.7677,-514.65985]
::draw.vertex[659]: a_Pos[-1877.9722,-511.24103]
::draw.vertex[660]: a_Pos[-1879.1465,-507.80804]
::draw.vertex[661]: a_Pos[-1880.2904,-504.36115]
::draw.vertex[662]: a_Pos[-1881.4039,-500.9004]
::draw.vertex[663]: a_Pos[-1882.4867,-497.4261]
::draw.vertex[664]: a_Pos[-1883.5387,-493.93823]
::draw.vertex[665]: a_Pos[-1884.5598,-490.43713]
::draw.vertex[666]: a_Pos[-1885.5497,-486.92285]
::draw.vertex[667]: a_Pos[-1886.5083,-483.39557]
::draw.vertex[668]: a_Pos[-1887.4354,-479.8554]
::draw.vertex[669]: a_Pos[-1888.3309,-476.3026]
::draw.vertex[670]: a_Pos[-1889.1948,-472.73724]
::draw.vertex[671]: a_Pos[-1890.0266,-469.1596]
::draw.vertex[672]: a_Pos[-1890.8264,-465.5697]
::draw.vertex[673]: a_Pos[-1891.594,-461.96777]
::draw.vertex[674]: a_Pos[-1892.3291,-458.35394]
::draw.vertex[675]: a_Pos[-1893.0316,-454.7284]
::draw.vertex[676]: a_Pos[-1893.7015,-451.09125]
::draw.vertex[677]: a_Pos[-1894.3385,-447.44275]
::draw.vertex[678]: a_Pos[-1894.9424,-443.78296]
::draw.vertex[679]: a_Pos[-1895.5131,-440.11212]
::draw.vertex[680]: a_Pos[-1896.0504,-436.4303]
::draw.vertex[681]: a_Pos[-1896.5543,-432.7378]
::draw.vertex[682]: a_Pos[-1897.0245,-429.0346]
::draw.vertex[683]: a_Pos[-1897.4608,-425.32098]
::draw.vertex[684]: a_Pos[-1897.8632,-421.59705]
::draw.vertex[685]: a_Pos[-1898.2314,-417.86298]
::draw.vertex[686]: a_Pos[-1898.5653,-414.11896]
::draw.vertex[687]: a_Pos[-1898.8647,-410.3651]
::draw.vertex[688]: a_Pos[-1899.1295,-406.6016]
::draw.vertex[689]: a_Pos[-1899.3595,-402.82858]
::draw.vertex[690]: a_Pos[-1899.5546,-399.04626]
::draw.vertex[691]: a_Pos[-1899.7145,-395.25473]
::draw.vertex[692]: a_Pos[-1899.8391,-391.4542]
::draw.vertex[693]: a_Pos[-1899.9285,-387.64478]
::draw.vertex[694]: a_Pos[-1899.982,-383.82666]
::draw.vertex[695]: a_Pos[-1900,-380]
::draw.vertex[696]: a_Pos[-300,20]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
void main() {
	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

draw(vertexCount=18, instances=1, indices=null, type=TRIANGLE_STRIP, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Tex, u_Transform, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=NOT_EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=3, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex) = TextureUnit(texture=Texture[1], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Transform) = Matrix3D(
  [ -0.0025, -0.0025, 0, -1.25 ],
  [ 0.0025, -0.0025, 0, 1.5 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Gradientp0) = [0.0, 0.0, 0.0]
::draw.uniform.Uniform(u_Gradientp1) = [100.0, 100.0, 0.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 0.9
::draw.uniform.Uniform(u_LineWidth) = 1.25
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3), Uniform(u_Gradientp0), Uniform(u_Gradientp1)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[5][0]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.attribute[6][0]=Attribute(a_Dist, type=Float1, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
::draw.vertex[0]: a_Pos[-1101.25,18.75], a_Tex[-1101.25,18.75], a_Dist[-1.5]
::draw.vertex[1]: a_Pos[-1100,21.25], a_Tex[-1100,21.25], a_Dist[1.5]
::draw.vertex[2]: a_Pos[-1898.75,18.75], a_Tex[-1898.75,18.75], a_Dist[-1.5]
::draw.vertex[3]: a_Pos[-1900,21.25], a_Tex[-1900,21.25], a_Dist[1.5]
::draw.vertex[4]: a_Pos[-1898.75,18.75], a_Tex[-1898.75,18.75], a_Dist[-1.5]
::draw.vertex[5]: a_Pos[-1901.25,20], a_Tex[-1901.25,20], a_Dist[1.5]
::draw.vertex[6]: a_Pos[-1898.75,-778.75], a_Tex[-1898.75,-778.75], a_Dist[-1.5]
::draw.vertex[7]: a_Pos[-1901.25,-780], a_Tex[-1901.25,-780], a_Dist[1.5]
::draw.vertex[8]: a_Pos[-1898.75,-778.75], a_Tex[-1898.75,-778.75], a_Dist[-1.5]
::draw.vertex[9]: a_Pos[-1900,-781.25], a_Tex[-1900,-781.25], a_Dist[1.5]
::draw.vertex[10]: a_Pos[-1101.25,-778.75], a_Tex[-1101.25,-778.75], a_Dist[-1.5]
::draw.vertex[11]: a_Pos[-1100,-781.25], a_Tex[-1100,-781.25], a_Dist[1.5]
::draw.vertex[12]: a_Pos[-1101.25,-778.75], a_Tex[-1101.25,-778.75], a_Dist[-1.5]
::draw.vertex[13]: a_Pos[-1098.75,-780], a_Tex[-1098.75,-780], a_Dist[1.5]
::draw.vertex[14]: a_Pos[-1101.25,18.75], a_Tex[-1101.25,18.75], a_Dist[-1.5]
::draw.vertex[15]: a_Pos[-1098.75,20], a_Tex[-1098.75,20], a_Dist[1.5]
::draw.vertex[16]: a_Pos[-1101.25,18.75], a_Tex[-1101.25,18.75], a_Dist[-1.5]
::draw.vertex[17]: a_Pos[-1100,21.25], a_Tex[-1100,21.25], a_Dist[1.5]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform sampler2D u_Tex;
uniform mat4 u_Transform;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
varying mediump vec2 v_Tex;
void main() {
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	gl_FragColor = texture2D(u_Tex, (u_Transform * vec4(v_Tex.x, v_Tex.y, 0.0, 1.0)).xy);
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=4, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Tex, u_Transform, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=3, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex) = TextureUnit(texture=Texture[1], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Transform) = Matrix3D(
  [ -0.0025, -0.0025, 0, -1.85 ],
  [ 0.0025, -0.0025, 0, 1.9 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Gradientp0) = [0.0, 0.0, 0.0]
::draw.uniform.Uniform(u_Gradientp1) = [100.0, 100.0, 0.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 0.9
::draw.uniform.Uniform(u_LineWidth) = 1.0E7
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3), Uniform(u_Gradientp0), Uniform(u_Gradientp1)]
::draw.ERROR.Unexpected:[Attribute(a_Dist)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[4][1]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0]
::draw.vertex[1]: a_Pos[200,0], a_Tex[100,0]
::draw.vertex[2]: a_Pos[200,200], a_Tex[100,100]
::draw.vertex[3]: a_Pos[0,200], a_Tex[0,100]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform sampler2D u_Tex;
uniform mat4 u_Transform;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
varying mediump vec2 v_Tex;
void main() {
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	gl_FragColor = texture2D(u_Tex, (u_Transform * vec4(v_Tex.x, v_Tex.y, 0.0, 1.0)).xy);
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=7, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos], uniforms=[u_ProjMat, u_ViewMat])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=ALWAYS, actionOnBothPass=INVERT, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=0, readMask=255, writeMask=1)
::draw.blending=Blending(srcRGB=ONE, dstRGB=ZERO, srcA=ONE, dstA=ZERO, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=false, green=false, blue=false, alpha=false)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[5][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6]
::draw.vertex[0]: a_Pos[-1500,-1180]
::draw.vertex[1]: a_Pos[-1100,-780]
::draw.vertex[2]: a_Pos[-1900,-780]
::draw.vertex[3]: a_Pos[-1900,-1580]
::draw.vertex[4]: a_Pos[-1100,-1580]
::draw.vertex[5]: a_Pos[-1100,-780]
::draw.vertex[6]: a_Pos[-1100,-780]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
void main() {
	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

draw(vertexCount=18, instances=1, indices=null, type=TRIANGLE_STRIP, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Transform, u_Gradientp0, u_Gradientp1, u_Tex, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=NOT_EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex) = TextureUnit(texture=Texture[1], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Transform) = Matrix3D(
  [ -0.25, 3.061617E-17, 0, 12.5 ],
  [ -3.061617E-17, -0.25, 0, 12.5 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Gradientp0) = [150.0, 150.0, 30.0]
::draw.uniform.Uniform(u_Gradientp1) = [130.0, 180.0, 70.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 0.9
::draw.uniform.Uniform(u_LineWidth) = 1.25
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[5][0]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.attribute[6][0]=Attribute(a_Dist, type=Float1, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
::draw.vertex[0]: a_Pos[-1101.25,-781.25], a_Tex[-1101.25,-781.25], a_Dist[-1.5]
::draw.vertex[1]: a_Pos[-1100,-778.75], a_Tex[-1100,-778.75], a_Dist[1.5]
::draw.vertex[2]: a_Pos[-1898.75,-781.25], a_Tex[-1898.75,-781.25], a_Dist[-1.5]
::draw.vertex[3]: a_Pos[-1900,-778.75], a_Tex[-1900,-778.75], a_Dist[1.5]
::draw.vertex[4]: a_Pos[-1898.75,-781.25], a_Tex[-1898.75,-781.25], a_Dist[-1.5]
::draw.vertex[5]: a_Pos[-1901.25,-780], a_Tex[-1901.25,-780], a_Dist[1.5]
::draw.vertex[6]: a_Pos[-1898.75,-1578.75], a_Tex[-1898.75,-1578.75], a_Dist[-1.5]
::draw.vertex[7]: a_Pos[-1901.25,-1580], a_Tex[-1901.25,-1580], a_Dist[1.5]
::draw.vertex[8]: a_Pos[-1898.75,-1578.75], a_Tex[-1898.75,-1578.75], a_Dist[-1.5]
::draw.vertex[9]: a_Pos[-1900,-1581.25], a_Tex[-1900,-1581.25], a_Dist[1.5]
::draw.vertex[10]: a_Pos[-1101.25,-1578.75], a_Tex[-1101.25,-1578.75], a_Dist[-1.5]
::draw.vertex[11]: a_Pos[-1100,-1581.25], a_Tex[-1100,-1581.25], a_Dist[1.5]
::draw.vertex[12]: a_Pos[-1101.25,-1578.75], a_Tex[-1101.25,-1578.75], a_Dist[-1.5]
::draw.vertex[13]: a_Pos[-1098.75,-1580], a_Tex[-1098.75,-1580], a_Dist[1.5]
::draw.vertex[14]: a_Pos[-1101.25,-781.25], a_Tex[-1101.25,-781.25], a_Dist[-1.5]
::draw.vertex[15]: a_Pos[-1098.75,-780], a_Tex[-1098.75,-780], a_Dist[1.5]
::draw.vertex[16]: a_Pos[-1101.25,-781.25], a_Tex[-1101.25,-781.25], a_Dist[-1.5]
::draw.vertex[17]: a_Pos[-1100,-778.75], a_Tex[-1100,-778.75], a_Dist[1.5]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform mat4 u_Transform;
uniform vec3 u_Gradientp0;
uniform vec3 u_Gradientp1;
uniform sampler2D u_Tex;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
varying mediump vec2 v_Tex;
void main() {
	vec2 temp3;
	vec4 temp0;
	vec4 temp1;
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	temp3.xy = (u_Transform * vec4(v_Tex.x, v_Tex.y, 0.0, 1.0)).xy;
	temp0.y = ((2.0 * u_Gradientp0.z) * u_Gradientp1.z);
	temp0.z = pow(u_Gradientp0.z, 2.0);
	temp0.w = pow(u_Gradientp1.z, 2.0);
	temp1.y = (u_Gradientp0.x - u_Gradientp1.x);
	temp1.x = (u_Gradientp0.y - u_Gradientp1.y);
	temp1.z = (u_Gradientp0.z - u_Gradientp1.z);
	temp1.w = (1.0 / ((pow((u_Gradientp0.z - u_Gradientp1.z), 2.0) - pow((u_Gradientp0.x - u_Gradientp1.x), 2.0)) - pow((u_Gradientp0.y - u_Gradientp1.y), 2.0)));
	temp0.x = (1.0 - ((((((-(u_Gradientp1.z)) * temp1.z) + (temp1.y * (u_Gradientp1.x - temp3.x))) + (temp1.x * (u_Gradientp1.y - temp3.y))) - sqrt(((((temp0.w * (pow((u_Gradientp0.x - temp3.x), 2.0) + pow((u_Gradientp0.y - temp3.y), 2.0))) - (temp0.y * (((u_Gradientp0.x - temp3.x) * (u_Gradientp1.x - temp3.x)) + ((u_Gradientp0.y - temp3.y) * (u_Gradientp1.y - temp3.y))))) + (temp0.z * (pow((u_Gradientp1.x - temp3.x), 2.0) + pow((u_Gradientp1.y - temp3.y), 2.0)))) - pow(((((((u_Gradientp1.x * u_Gradientp0.y) - (temp3.x * u_Gradientp0.y)) - (u_Gradientp0.x * u_Gradientp1.y)) + (temp3.x * u_Gradientp1.y)) + (u_Gradientp0.x * temp3.y)) - (u_Gradientp1.x * temp3.y)), 2.0)))) * temp1.w));
	gl_FragColor = texture2D(u_Tex, vec2(temp0.x, 0.0));
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=4, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Transform, u_Gradientp0, u_Gradientp1, u_Tex, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex) = TextureUnit(texture=Texture[1], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Transform) = Matrix3D(
  [ -0.25, 3.061617E-17, 0, -37.5 ],
  [ -3.061617E-17, -0.25, 0, 2.5 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Gradientp0) = [150.0, 150.0, 30.0]
::draw.uniform.Uniform(u_Gradientp1) = [130.0, 180.0, 70.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 0.9
::draw.uniform.Uniform(u_LineWidth) = 1.0E7
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.ERROR.Unexpected:[Attribute(a_Dist)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[4][1]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0]
::draw.vertex[1]: a_Pos[200,0], a_Tex[100,0]
::draw.vertex[2]: a_Pos[200,200], a_Tex[100,100]
::draw.vertex[3]: a_Pos[0,200], a_Tex[0,100]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform mat4 u_Transform;
uniform vec3 u_Gradientp0;
uniform vec3 u_Gradientp1;
uniform sampler2D u_Tex;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
varying mediump vec2 v_Tex;
void main() {
	vec2 temp3;
	vec4 temp0;
	vec4 temp1;
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	temp3.xy = (u_Transform * vec4(v_Tex.x, v_Tex.y, 0.0, 1.0)).xy;
	temp0.y = ((2.0 * u_Gradientp0.z) * u_Gradientp1.z);
	temp0.z = pow(u_Gradientp0.z, 2.0);
	temp0.w = pow(u_Gradientp1.z, 2.0);
	temp1.y = (u_Gradientp0.x - u_Gradientp1.x);
	temp1.x = (u_Gradientp0.y - u_Gradientp1.y);
	temp1.z = (u_Gradientp0.z - u_Gradientp1.z);
	temp1.w = (1.0 / ((pow((u_Gradientp0.z - u_Gradientp1.z), 2.0) - pow((u_Gradientp0.x - u_Gradientp1.x), 2.0)) - pow((u_Gradientp0.y - u_Gradientp1.y), 2.0)));
	temp0.x = (1.0 - ((((((-(u_Gradientp1.z)) * temp1.z) + (temp1.y * (u_Gradientp1.x - temp3.x))) + (temp1.x * (u_Gradientp1.y - temp3.y))) - sqrt(((((temp0.w * (pow((u_Gradientp0.x - temp3.x), 2.0) + pow((u_Gradientp0.y - temp3.y), 2.0))) - (temp0.y * (((u_Gradientp0.x - temp3.x) * (u_Gradientp1.x - temp3.x)) + ((u_Gradientp0.y - temp3.y) * (u_Gradientp1.y - temp3.y))))) + (temp0.z * (pow((u_Gradientp1.x - temp3.x), 2.0) + pow((u_Gradientp1.y - temp3.y), 2.0)))) - pow(((((((u_Gradientp1.x * u_Gradientp0.y) - (temp3.x * u_Gradientp0.y)) - (u_Gradientp0.x * u_Gradientp1.y)) + (temp3.x * u_Gradientp1.y)) + (u_Gradientp0.x * temp3.y)) - (u_Gradientp1.x * temp3.y)), 2.0)))) * temp1.w));
	gl_FragColor = texture2D(u_Tex, vec2(temp0.x, 0.0));
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=7, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos], uniforms=[u_ProjMat, u_ViewMat])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=ALWAYS, actionOnBothPass=INVERT, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=0, readMask=255, writeMask=1)
::draw.blending=Blending(srcRGB=ONE, dstRGB=ZERO, srcA=ONE, dstA=ZERO, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=false, green=false, blue=false, alpha=false)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3)]
::draw.attribute[5][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6]
::draw.vertex[0]: a_Pos[-1700,-780]
::draw.vertex[1]: a_Pos[-1500,-580]
::draw.vertex[2]: a_Pos[-1900,-580]
::draw.vertex[3]: a_Pos[-1900,-980]
::draw.vertex[4]: a_Pos[-1500,-980]
::draw.vertex[5]: a_Pos[-1500,-580]
::draw.vertex[6]: a_Pos[-1500,-580]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
void main() {
	gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

draw(vertexCount=18, instances=1, indices=null, type=TRIANGLE_STRIP, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Transform, u_Gradientp0, u_Tex, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=NOT_EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex) = TextureUnit(texture=Texture[1], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Transform) = Matrix3D(
  [ -0.25, 3.061617E-17, 0, 12.5 ],
  [ -3.061617E-17, -0.25, 0, 12.5 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Gradientp0) = [175.0, 100.0, 0.0]
::draw.uniform.Uniform(u_Gradientp1) = [0.0, 0.0, 0.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 0.9
::draw.uniform.Uniform(u_LineWidth) = 1.25
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3), Uniform(u_Gradientp1)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[5][0]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.attribute[6][0]=Attribute(a_Dist, type=Float1, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
::draw.vertex[0]: a_Pos[-1501.25,-581.25], a_Tex[-1501.25,-581.25], a_Dist[-1.5]
::draw.vertex[1]: a_Pos[-1500,-578.75], a_Tex[-1500,-578.75], a_Dist[1.5]
::draw.vertex[2]: a_Pos[-1898.75,-581.25], a_Tex[-1898.75,-581.25], a_Dist[-1.5]
::draw.vertex[3]: a_Pos[-1900,-578.75], a_Tex[-1900,-578.75], a_Dist[1.5]
::draw.vertex[4]: a_Pos[-1898.75,-581.25], a_Tex[-1898.75,-581.25], a_Dist[-1.5]
::draw.vertex[5]: a_Pos[-1901.25,-580], a_Tex[-1901.25,-580], a_Dist[1.5]
::draw.vertex[6]: a_Pos[-1898.75,-978.75], a_Tex[-1898.75,-978.75], a_Dist[-1.5]
::draw.vertex[7]: a_Pos[-1901.25,-980], a_Tex[-1901.25,-980], a_Dist[1.5]
::draw.vertex[8]: a_Pos[-1898.75,-978.75], a_Tex[-1898.75,-978.75], a_Dist[-1.5]
::draw.vertex[9]: a_Pos[-1900,-981.25], a_Tex[-1900,-981.25], a_Dist[1.5]
::draw.vertex[10]: a_Pos[-1501.25,-978.75], a_Tex[-1501.25,-978.75], a_Dist[-1.5]
::draw.vertex[11]: a_Pos[-1500,-981.25], a_Tex[-1500,-981.25], a_Dist[1.5]
::draw.vertex[12]: a_Pos[-1501.25,-978.75], a_Tex[-1501.25,-978.75], a_Dist[-1.5]
::draw.vertex[13]: a_Pos[-1498.75,-980], a_Tex[-1498.75,-980], a_Dist[1.5]
::draw.vertex[14]: a_Pos[-1501.25,-581.25], a_Tex[-1501.25,-581.25], a_Dist[-1.5]
::draw.vertex[15]: a_Pos[-1498.75,-580], a_Tex[-1498.75,-580], a_Dist[1.5]
::draw.vertex[16]: a_Pos[-1501.25,-581.25], a_Tex[-1501.25,-581.25], a_Dist[-1.5]
::draw.vertex[17]: a_Pos[-1500,-578.75], a_Tex[-1500,-578.75], a_Dist[1.5]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform mat4 u_Transform;
uniform vec3 u_Gradientp0;
uniform sampler2D u_Tex;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
varying mediump vec2 v_Tex;
void main() {
	vec2 temp3;
	vec4 temp0;
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	temp3.xy = (u_Transform * vec4(v_Tex.x, v_Tex.y, 0.0, 1.0)).xy;
	temp0.y = atan((temp3.y - u_Gradientp0.y), (temp3.x - u_Gradientp0.x));
	if ((temp0.y < 0.0)) {
		temp0.y = (temp0.y + 6.2831855);
	}
	temp0.x = (temp0.y / 6.2831855);
	gl_FragColor = texture2D(u_Tex, fract(vec2(temp0.x, 0.0)));
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=4, instances=1, indices=null, type=TRIANGLE_FAN, offset=0)
::draw.program=Program(name=program, attributes=[a_Pos, a_Tex, a_Dist], uniforms=[u_ProjMat, u_ViewMat, u_LineWidth, u_Transform, u_Gradientp0, u_Tex, u_GlobalAlpha])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=0, height=0)
::draw.stencil=StencilState(enabled=true, triangleFace=FRONT_AND_BACK, compareMode=EQUAL, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=1, readMask=255, writeMask=0)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.0078125, 0, 0, -1 ],
  [ 0, 0.0078125, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=false, trilinear=null)
::draw.uniform.Uniform(u_Tex) = TextureUnit(texture=Texture[1], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Transform) = Matrix3D(
  [ -0.25, 3.061617E-17, 0, -37.5 ],
  [ -3.061617E-17, -0.25, 0, 2.5 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Gradientp0) = [175.0, 100.0, 0.0]
::draw.uniform.Uniform(u_Gradientp1) = [0.0, 0.0, 0.0]
::draw.uniform.Uniform(u_GlobalAlpha) = 0.9
::draw.uniform.Uniform(u_LineWidth) = 1.0E7
::draw.ERROR.Unexpected:[Uniform(u_Tex0), Uniform(u_Tex1), Uniform(u_Tex2), Uniform(u_Tex3), Uniform(u_Gradientp1)]
::draw.ERROR.Unexpected:[Attribute(a_Dist)]
::draw.attribute[4][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[4][1]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.indices=[0, 1, 2, 3]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0]
::draw.vertex[1]: a_Pos[200,0], a_Tex[100,0]
::draw.vertex[2]: a_Pos[200,200], a_Tex[100,100]
::draw.vertex[3]: a_Pos[0,200], a_Tex[0,100]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute highp vec2 a_Pos;
attribute mediump vec2 a_Tex;
attribute mediump float a_Dist;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying mediump float v_Dist;
void main() {
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
	v_Tex = a_Tex;
	v_Dist = a_Dist;
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform float u_LineWidth;
uniform mat4 u_Transform;
uniform vec3 u_Gradientp0;
uniform sampler2D u_Tex;
uniform float u_GlobalAlpha;
varying mediump float v_Dist;
varying mediump vec2 v_Tex;
void main() {
	vec2 temp3;
	vec4 temp0;
	if ((abs(v_Dist) >= u_LineWidth)) {
		discard;
	}
	temp3.xy = (u_Transform * vec4(v_Tex.x, v_Tex.y, 0.0, 1.0)).xy;
	temp0.y = atan((temp3.y - u_Gradientp0.y), (temp3.x - u_Gradientp0.x));
	if ((temp0.y < 0.0)) {
		temp0.y = (temp0.y + 6.2831855);
	}
	temp0.x = (temp0.y / 6.2831855);
	gl_FragColor = texture2D(u_Tex, fract(vec2(temp0.x, 0.0)));
	gl_FragColor.w = (gl_FragColor.w * u_GlobalAlpha);
	if ((abs(v_Dist) >= (u_LineWidth - 1.0))) {
		gl_FragColor.a = (gl_FragColor.a * (1.0 - (abs(v_Dist) - (u_LineWidth - 1.0))));
	}
}

draw(vertexCount=6, instances=1, indices=Buffer[2], type=TRIANGLES, offset=0)
::draw.program=Program(name=BatchBuilder2D.Premultiplied.Tinted.NoAdd, attributes=[a_Tex, a_TexIndex, a_Col, a_Col2, a_Pos], uniforms=[u_ProjMat, u_ViewMat, u_Tex0, u_Tex1, u_Tex2, u_Tex3])
::draw.renderState=RenderState(depthFunc=ALWAYS, depthMask=true, depthNear=0.0, depthFar=1.0, lineWidth=1.0, frontFace=BOTH)
::draw.scissor=Scissor(x=0, y=0, width=200, height=200)
::draw.stencil=StencilState(enabled=false, triangleFace=FRONT_AND_BACK, compareMode=ALWAYS, actionOnBothPass=KEEP, actionOnDepthFail=KEEP, actionOnDepthPassStencilFail=KEEP, referenceValue=0, readMask=255, writeMask=255)
::draw.blending=Blending(srcRGB=SOURCE_ALPHA, dstRGB=ONE_MINUS_SOURCE_ALPHA, srcA=ONE, dstA=ONE_MINUS_SOURCE_ALPHA, eqRGB=ADD, eqA=ADD)
::draw.colorMask=ColorMaskState(red=true, green=true, blue=true, alpha=true)
::draw.uniform.Uniform(u_ProjMat) = Matrix3D(
  [ 0.01, 0, 0, -1 ],
  [ 0, -0.01, 0, 1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
::draw.uniform.Uniform(u_Tex0) = TextureUnit(texture=Texture[2], linear=true, trilinear=null)
::draw.uniform.Uniform(u_Tex1) = TextureUnit(texture=null, linear=true, trilinear=null)
::draw.uniform.Uniform(u_Tex2) = TextureUnit(texture=null, linear=true, trilinear=null)
::draw.uniform.Uniform(u_Tex3) = TextureUnit(texture=null, linear=true, trilinear=null)
::draw.attribute[0][0]=Attribute(a_Pos, type=Float2, normalized=false, offset=null, active=true, precision=HIGH, divisor=0)
::draw.attribute[0][1]=Attribute(a_Tex, type=Float2, normalized=false, offset=null, active=true, precision=MEDIUM, divisor=0)
::draw.attribute[0][2]=Attribute(a_Col, type=Byte4, normalized=true, offset=null, active=true, precision=LOW, divisor=0)
::draw.attribute[0][3]=Attribute(a_Col2, type=Byte4, normalized=true, offset=null, active=true, precision=DEFAULT, divisor=0)
::draw.attribute[1][0]=Attribute(a_TexIndex, type=UByte1, normalized=false, offset=null, active=true, precision=LOW, divisor=0)
::draw.indices=[0, 1, 2, 3, 0, 2]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[1]: a_Pos[200,0], a_Tex[0.78125,0], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[2]: a_Pos[200,200], a_Tex[0.78125,0.78125], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[3]: a_Pos[0,200], a_Tex[0,0.78125], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.shader.vertex=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute mediump vec2 a_Tex;
attribute lowp float a_TexIndex;
attribute lowp vec4 a_Col;
attribute vec4 a_Col2;
attribute highp vec2 a_Pos;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying lowp float v_TexIndex;
varying vec4 v_Col;
varying vec4 v_Col2;
void main() {
	v_Tex = a_Tex;
	v_TexIndex = a_TexIndex;
	v_Col = a_Col;
	v_Col2 = a_Col2;
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
}

::draw.shader.fragment=#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform sampler2D u_Tex0;
uniform sampler2D u_Tex1;
uniform sampler2D u_Tex2;
uniform sampler2D u_Tex3;
varying lowp float v_TexIndex;
varying mediump vec2 v_Tex;
varying vec4 v_Col;
void main() {
	if ((v_TexIndex <= 1.0)) {
		if ((v_TexIndex == 0.0)) {
			gl_FragColor = texture2D(u_Tex0, fract(v_Tex.xy));
		}
		else {
			gl_FragColor = texture2D(u_Tex1, fract(v_Tex.xy));
		}
	}
	else {
		if ((v_TexIndex == 2.0)) {
			gl_FragColor = texture2D(u_Tex2, fract(v_Tex.xy));
		}
		else {
			gl_FragColor = texture2D(u_Tex3, fract(v_Tex.xy));
		}
	}
	gl_FragColor.rgb = (gl_FragColor.rgb / gl_FragColor.a);
	gl_FragColor = (gl_FragColor.rgba * v_Col.rgba);
	if ((gl_FragColor.a <= 0.0)) {
		discard;
	}
}

Rectangle(x=-950, y=-790, width=1000, height=840)
Rectangle(x=0, y=0, width=500, height=420)