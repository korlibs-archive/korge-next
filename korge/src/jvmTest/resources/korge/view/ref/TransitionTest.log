createBuffer():0
bufferCreate: 1
createBuffer():1
bufferCreate: 2
createBuffer():2
bufferCreate: 3
createBuffer():3
bufferCreate: 4
RenderBuffer[0].setSize(800, 600)
createMainRenderBuffer():0
RenderBuffer[0].set()
clear(#00000000, 1.0, 0, true, true, true)
disposeTemporalPerFrameStuff()
flipInternal()
RenderBuffer[0].set()
clear(#00000000, 1.0, 0, true, true, true)
createRenderBuffer():1
RenderBuffer[1].setSize(512, 512)
RenderBuffer[1].set()
clear(#00000000, 1.0, 0, true, true, true)
textureCreate: 1
createTexture():0
Texture[0].uploadedBitmap(SyncBitmapSource(rgba=true, width=1, height=1), 1, 1)
Buffer[0].afterSetMem(mem[393216])
Buffer[1].afterSetMem(mem[4])
Buffer[2].afterSetMem(mem[49152])
enable: SCISSOR
scissor: 101, 0, 411, 512
vaoCreate: 1
vaoSet: 1, VertexArrayObject(list=[VertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), VertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex])])
vaoUse: 1
uboCreate: 1
uboSet: 1
uboSet.uniform: Uniform(u_ProjMat) = Matrix3D(
  [ 0.00390625, 0, 0, -1 ],
  [ 0, 0.00390625, 0, -1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_Tex0) = TextureUnit(texture=Texture[0], linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex1) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex2) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex3) = TextureUnit(texture=null, linear=true, trilinear=null)
uboUse: 1
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=6, instances=1, indexType=USHORT
::draw.indices: [0, 1, 2, 3, 0, 2]
::draw.attributes[2]: [Attribute(a_Pos), Attribute(a_Tex), Attribute(a_Col), Attribute(a_Col2), Attribute(a_TexIndex)]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0], a_Col[0,0,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[1]: a_Pos[512,0], a_Tex[1,0], a_Col[0,0,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[2]: a_Pos[512,512], a_Tex[1,1], a_Col[0,0,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[3]: a_Pos[0,512], a_Tex[0,1], a_Col[0,0,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
uboDelete: 1
vaoUse: 0
vaoDelete: 1
RenderBuffer[0].set()
textureCreate: 2
createTexture():1
textureCreate: 3
createTexture():2
Texture[2].uploadedBitmap(SyncBitmapSource(rgba=true, width=64, height=64), 64, 64)
Buffer[0].afterSetMem(mem[393216])
Buffer[1].afterSetMem(mem[4])
Buffer[2].afterSetMem(mem[49152])
enable: SCISSOR
scissor: 100, 0, 600, 600
vaoCreate: 1
vaoSet: 1, VertexArrayObject(list=[VertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), VertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex])])
vaoUse: 1
uboCreate: 1
uboSet: 1
uboSet.uniform: Uniform(u_ProjMat) = Matrix3D(
  [ 0.0029296875, 0, 0, -0.7480469 ],
  [ 0, -0.00390625, 0, 1 ],
  [ 0, 0, -1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_ViewMat) = Matrix3D(
  [ 1, 0, 0, 0 ],
  [ 0, 1, 0, 0 ],
  [ 0, 0, 1, 0 ],
  [ 0, 0, 0, 1 ],
)
uboSet.uniform: Uniform(u_Tex0) = TextureUnit(texture=Texture[1], linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex1) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex2) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Tex3) = TextureUnit(texture=null, linear=true, trilinear=null)
uboSet.uniform: Uniform(effectTextureSize) = [512.0, 512.0]
uboSet.uniform: Uniform(u_MaxTexCoords) = [1.0, 1.0]
uboSet.uniform: Uniform(u_StdTexDerivates) = [0.001953125, 0.001953125]
uboSet.uniform: Uniform(u_Ratio) = [0.5, 0.0, 0.0, 0.0]
uboSet.uniform: Uniform(u_Mask) = TextureUnit(texture=Texture[2], linear=true, trilinear=null)
uboSet.uniform: Uniform(u_Reversed) = [0.0, 0.0, 0.0, 0.0]
uboSet.uniform: Uniform(u_Smooth) = [1.0, 0.0, 0.0, 0.0]
uboSet.uniform: Uniform(u_filterScale) = 1.0
uboUse: 1
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=6, instances=1, indexType=USHORT
::draw.indices: [0, 1, 2, 3, 0, 2]
::draw.attributes[2]: [Attribute(a_Pos), Attribute(a_Tex), Attribute(a_Col), Attribute(a_Col2), Attribute(a_TexIndex)]
::draw.vertex[0]: a_Pos[0,0], a_Tex[0,0], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[1]: a_Pos[512,0], a_Tex[1,0], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[2]: a_Pos[512,512], a_Tex[1,1], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
::draw.vertex[3]: a_Pos[0,512], a_Tex[0,1], a_Col[1,1,1,1], a_Col2[0.49803922,0.49803922,0.49803922,0.49803922], a_TexIndex[0]
uboDelete: 1
vaoUse: 0
vaoDelete: 1
disposeTemporalPerFrameStuff()
flipInternal()